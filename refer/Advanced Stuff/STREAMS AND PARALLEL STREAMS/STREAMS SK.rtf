{\rtf1\adeflang1025\ansi\ansicpg1252\uc1\adeff31507\deff0\stshfdbch31505\stshfloch31506\stshfhich31506\stshfbi31507\deflang16393\deflangfe16393\themelang16393\themelangfe0\themelangcs0{\fonttbl{\f0\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f3\fbidi \froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
{\f34\fbidi \froman\fcharset0\fprq2{\*\panose 02040503050406030204}Cambria Math;}{\f37\fbidi \fswiss\fcharset0\fprq2{\*\panose 020f0502020204030204}Calibri;}{\flomajor\f31500\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\fdbmajor\f31501\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\fhimajor\f31502\fbidi \fswiss\fcharset0\fprq2{\*\panose 020f0302020204030204}Calibri Light;}
{\fbimajor\f31503\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\flominor\f31504\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\fdbminor\f31505\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\fhiminor\f31506\fbidi \fswiss\fcharset0\fprq2{\*\panose 020f0502020204030204}Calibri;}
{\fbiminor\f31507\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f43\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\f44\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}
{\f46\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\f47\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\f48\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\f49\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}
{\f50\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\f51\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\f383\fbidi \froman\fcharset238\fprq2 Cambria Math CE;}{\f384\fbidi \froman\fcharset204\fprq2 Cambria Math Cyr;}
{\f386\fbidi \froman\fcharset161\fprq2 Cambria Math Greek;}{\f387\fbidi \froman\fcharset162\fprq2 Cambria Math Tur;}{\f390\fbidi \froman\fcharset186\fprq2 Cambria Math Baltic;}{\f391\fbidi \froman\fcharset163\fprq2 Cambria Math (Vietnamese);}
{\f413\fbidi \fswiss\fcharset238\fprq2 Calibri CE;}{\f414\fbidi \fswiss\fcharset204\fprq2 Calibri Cyr;}{\f416\fbidi \fswiss\fcharset161\fprq2 Calibri Greek;}{\f417\fbidi \fswiss\fcharset162\fprq2 Calibri Tur;}
{\f418\fbidi \fswiss\fcharset177\fprq2 Calibri (Hebrew);}{\f419\fbidi \fswiss\fcharset178\fprq2 Calibri (Arabic);}{\f420\fbidi \fswiss\fcharset186\fprq2 Calibri Baltic;}{\f421\fbidi \fswiss\fcharset163\fprq2 Calibri (Vietnamese);}
{\flomajor\f31508\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\flomajor\f31509\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}{\flomajor\f31511\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}
{\flomajor\f31512\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\flomajor\f31513\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\flomajor\f31514\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}
{\flomajor\f31515\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\flomajor\f31516\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\fdbmajor\f31518\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}
{\fdbmajor\f31519\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}{\fdbmajor\f31521\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\fdbmajor\f31522\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}
{\fdbmajor\f31523\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\fdbmajor\f31524\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\fdbmajor\f31525\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}
{\fdbmajor\f31526\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\fhimajor\f31528\fbidi \fswiss\fcharset238\fprq2 Calibri Light CE;}{\fhimajor\f31529\fbidi \fswiss\fcharset204\fprq2 Calibri Light Cyr;}
{\fhimajor\f31531\fbidi \fswiss\fcharset161\fprq2 Calibri Light Greek;}{\fhimajor\f31532\fbidi \fswiss\fcharset162\fprq2 Calibri Light Tur;}{\fhimajor\f31533\fbidi \fswiss\fcharset177\fprq2 Calibri Light (Hebrew);}
{\fhimajor\f31534\fbidi \fswiss\fcharset178\fprq2 Calibri Light (Arabic);}{\fhimajor\f31535\fbidi \fswiss\fcharset186\fprq2 Calibri Light Baltic;}{\fhimajor\f31536\fbidi \fswiss\fcharset163\fprq2 Calibri Light (Vietnamese);}
{\fbimajor\f31538\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\fbimajor\f31539\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}{\fbimajor\f31541\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}
{\fbimajor\f31542\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\fbimajor\f31543\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\fbimajor\f31544\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}
{\fbimajor\f31545\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\fbimajor\f31546\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\flominor\f31548\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}
{\flominor\f31549\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}{\flominor\f31551\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\flominor\f31552\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}
{\flominor\f31553\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\flominor\f31554\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\flominor\f31555\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}
{\flominor\f31556\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\fdbminor\f31558\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\fdbminor\f31559\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}
{\fdbminor\f31561\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\fdbminor\f31562\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\fdbminor\f31563\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}
{\fdbminor\f31564\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\fdbminor\f31565\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\fdbminor\f31566\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}
{\fhiminor\f31568\fbidi \fswiss\fcharset238\fprq2 Calibri CE;}{\fhiminor\f31569\fbidi \fswiss\fcharset204\fprq2 Calibri Cyr;}{\fhiminor\f31571\fbidi \fswiss\fcharset161\fprq2 Calibri Greek;}{\fhiminor\f31572\fbidi \fswiss\fcharset162\fprq2 Calibri Tur;}
{\fhiminor\f31573\fbidi \fswiss\fcharset177\fprq2 Calibri (Hebrew);}{\fhiminor\f31574\fbidi \fswiss\fcharset178\fprq2 Calibri (Arabic);}{\fhiminor\f31575\fbidi \fswiss\fcharset186\fprq2 Calibri Baltic;}
{\fhiminor\f31576\fbidi \fswiss\fcharset163\fprq2 Calibri (Vietnamese);}{\fbiminor\f31578\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\fbiminor\f31579\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}
{\fbiminor\f31581\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\fbiminor\f31582\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\fbiminor\f31583\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}
{\fbiminor\f31584\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\fbiminor\f31585\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\fbiminor\f31586\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;
\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green0\blue0;\red0\green0\blue0;}{\*\defchp \fs22\loch\af31506\hich\af31506\dbch\af31505 }{\*\defpap 
\ql \li0\ri0\sa160\sl259\slmult1\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 }\noqfpromote {\stylesheet{\ql \li0\ri0\sa160\sl259\slmult1\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 
\af31507\afs22\alang1025 \ltrch\fcs0 \fs22\lang16393\langfe16393\loch\f31506\hich\af31506\dbch\af31505\cgrid\langnp16393\langfenp16393 \snext0 \sqformat \spriority0 Normal;}{\*\cs10 \additive \ssemihidden \sunhideused \spriority1 Default Paragraph Font;}
{\*\ts11\tsrowd\trftsWidthB3\trpaddl108\trpaddr108\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3\trcbpat1\trcfpat1\tblind0\tblindtype3\tsvertalt\tsbrdrt\tsbrdrl\tsbrdrb\tsbrdrr\tsbrdrdgl\tsbrdrdgr\tsbrdrh\tsbrdrv \ql \li0\ri0\sa160\sl259\slmult1
\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af31507\afs22\alang1025 \ltrch\fcs0 \fs22\lang16393\langfe16393\loch\f31506\hich\af31506\dbch\af31505\cgrid\langnp16393\langfenp16393 
\snext11 \ssemihidden \sunhideused Normal Table;}}{\*\listtable{\list\listtemplateid-1193517154\listsimple{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat0\levelspace0\levelindent0{\leveltext\'01*;}{\levelnumbers;}}
{\listname ;}\listid-2}{\list\listtemplateid-559008518\listsimple{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelold\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\rtlch\fcs1 \af37 \ltrch\fcs0 
\f37\fbias0 }{\listname ;}\listid1422412177}}{\*\listoverridetable{\listoverride\listid1422412177\listoverridecount0\ls1}{\listoverride\listid-2\listoverridecount1{\lfolevel\listoverrideformat{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0
\levelfollow0\levelstartat0\levelold\levelspace0\levelindent0{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 }}\ls2}}{\*\pgptbl {\pgp\ipgp0\itap0\li0\ri0\sb0\sa0}{\pgp\ipgp0\itap0\li0\ri0\sb0\sa0}{\pgp\ipgp0\itap0\li0\ri0\sb0\sa0}{\pgp\ipgp0\itap0
\li0\ri0\sb0\sa0}{\pgp\ipgp0\itap0\li0\ri0\sb0\sa0}{\pgp\ipgp0\itap0\li0\ri0\sb0\sa0}}{\*\rsidtbl \rsid1120764\rsid1517842\rsid2909569\rsid6637831}{\mmathPr\mmathFont34\mbrkBin0\mbrkBinSub0\msmallFrac0\mdispDef1\mlMargin0\mrMargin0\mdefJc1\mwrapIndent1440
\mintLim0\mnaryLim1}{\info{\author Sanna Mahajan}{\operator Sanna Mahajan}{\creatim\yr2019\mo7\dy6\hr9\min48}{\revtim\yr2019\mo7\dy6\hr9\min48}{\version2}{\edmins0}{\nofpages25}{\nofwords3386}{\nofchars19306}{\nofcharsws22647}{\vern93}}
{\*\xmlnstbl {\xmlns1 http://schemas.microsoft.com/office/word/2003/wordml}}\paperw12240\paperh15840\margl1440\margr1440\margt1440\margb1440\gutter0\ltrsect 
\widowctrl\ftnbj\aenddoc\trackmoves0\trackformatting1\donotembedsysfont0\relyonvml0\donotembedlingdata1\grfdocevents0\validatexml0\showplaceholdtext0\ignoremixedcontent0\saveinvalidxml0\showxmlerrors0\horzdoc\dghspace120\dgvspace120\dghorigin1701
\dgvorigin1984\dghshow0\dgvshow3\jcompress\viewkind1\viewscale100\rsidroot2909569 \nouicompat \fet0{\*\wgrffmtfilter 2450}\nofeaturethrottle1\ilfomacatclnup0\ltrpar \sectd \ltrsect\linex0\sectdefaultcl\sftnbj {\*\pnseclvl1
\pnucrm\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang {\pntxta )}}{\*\pnseclvl5
\pndec\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang 
{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}\pard\plain \ltrpar\qc \li0\ri0\sa200\sl276\slmult1\nowidctlpar\wrapdefault\faauto\rin0\lin0\itap0 \rtlch\fcs1 \af31507\afs22\alang1025 \ltrch\fcs0 
\fs22\lang16393\langfe16393\loch\af31506\hich\af31506\dbch\af31505\cgrid\langnp16393\langfenp16393 {\rtlch\fcs1 \ab\af37\afs40 \ltrch\fcs0 \b\f37\fs40\lang9\langfe16393\langnp9\insrsid1120764 \hich\af37\dbch\af31505\loch\f37 TOPIC 5
\par \hich\af37\dbch\af31505\loch\f37 STREAMS / PARALLEL STREAMS IN COLLECTIONS 
\par }{\rtlch\fcs1 \ab\af37\afs30 \ltrch\fcs0 \b\f37\fs30\lang9\langfe16393\langnp9\insrsid2909569\charrsid2909569 \hich\af37\dbch\af31505\loch\f37 (\hich\af37\dbch\af31505\loch\f37 DONE BY: KEERT\hich\af37\dbch\af31505\loch\f37 I
\hich\af37\dbch\af31505\loch\f37 , SHREENA\hich\af37\dbch\af31505\loch\f37 , RUBINA,}{\rtlch\fcs1 \ab\af37\afs30 \ltrch\fcs0 \b\f37\fs30\lang9\langfe16393\langnp9\insrsid2909569 \hich\af37\dbch\af31505\loch\f37  }{\rtlch\fcs1 \ab\af37\afs30 \ltrch\fcs0 
\b\f37\fs30\lang9\langfe16393\langnp9\insrsid2909569\charrsid2909569 \hich\af37\dbch\af31505\loch\f37 R\hich\af37\dbch\af31505\loch\f37 ONEENA)
\par }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\nowidctlpar\wrapdefault\faauto\rin0\lin0\itap0\pararsid2909569 {\rtlch\fcs1 \ab\af37\afs40 \ltrch\fcs0 \b\f37\fs40\lang9\langfe16393\langnp9\insrsid2909569 
\par }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\nowidctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \ab\af37\afs30 \ltrch\fcs0 \b\f37\fs30\lang9\langfe16393\langnp9\insrsid1120764 \hich\af37\dbch\af31505\loch\f37 What is Stream?}{\rtlch\fcs1 \af37 
\ltrch\fcs0 \f37\lang9\langfe16393\langnp9\insrsid1120764 
\par \hich\af37\dbch\af31505\loch\f37 Stream represents a sequence of objects from a source, which suppor\hich\af37\dbch\af31505\loch\f37 ts aggregate operations. Following are the characteristics of a Stream }{\rtlch\fcs1 \af34 \ltrch\fcs0 
\f34\lang9\langfe16393\langnp9\insrsid1120764 \loch\af34\dbch\af31505\hich\f34 \u8722\'2d}{\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\lang9\langfe16393\langnp9\insrsid1120764 
\par {\pntext\pard\plain\ltrpar \rtlch\fcs1 \ab\af37\afs22 \ltrch\fcs0 \b\f37\fs22\lang9\langfe16393\langnp9 \hich\af37\dbch\af31505\loch\f37 1.\tab}}\pard \ltrpar\ql \fi-360\li720\ri0\sa200\sl276\slmult1\nowidctlpar\wrapdefault{\*\pn 
\pnlvlbody\ilvl0\ls1\pnrnot0\pndec\pnf37\pnstart1 {\pntxta .}}\faauto\ls1\rin0\lin720\itap0\pararsid2909569 {\rtlch\fcs1 \ab\af37 \ltrch\fcs0 \b\f37\lang9\langfe16393\langnp9\insrsid1120764 \hich\af37\dbch\af31505\loch\f37 Sequence of elements }{
\rtlch\fcs1 \af34 \ltrch\fcs0 \f34\lang9\langfe16393\langnp9\insrsid1120764 \loch\af34\dbch\af31505\hich\f34 \u8722\'2d}{\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\lang9\langfe16393\langnp9\insrsid1120764 \hich\af37\dbch\af31505\loch\f37 
 A stream provides a set of elements of specific type in a sequential manner. A stream gets/computes elements on demand. It never stores the elements.
\par {\pntext\pard\plain\ltrpar \rtlch\fcs1 \ab\af37\afs22 \ltrch\fcs0 \b\f37\fs22\lang9\langfe16393\langnp9 \hich\af37\dbch\af31505\loch\f37 2.\tab}}{\rtlch\fcs1 \ab\af37 \ltrch\fcs0 \b\f37\lang9\langfe16393\langnp9\insrsid1120764 
\hich\af37\dbch\af31505\loch\f37 Sou\hich\af37\dbch\af31505\loch\f37 rce}{\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\lang9\langfe16393\langnp9\insrsid1120764 \hich\af37\dbch\af31505\loch\f37  }{\rtlch\fcs1 \af34 \ltrch\fcs0 
\f34\lang9\langfe16393\langnp9\insrsid1120764 \loch\af34\dbch\af31505\hich\f34 \u8722\'2d}{\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\lang9\langfe16393\langnp9\insrsid1120764 \hich\af37\dbch\af31505\loch\f37 
 Stream takes Collections, Arrays, or I/O resources as input source.
\par {\pntext\pard\plain\ltrpar \rtlch\fcs1 \ab\af37\afs22 \ltrch\fcs0 \b\f37\fs22\lang9\langfe16393\langnp9 \hich\af37\dbch\af31505\loch\f37 3.\tab}}{\rtlch\fcs1 \ab\af37 \ltrch\fcs0 \b\f37\lang9\langfe16393\langnp9\insrsid1120764 
\hich\af37\dbch\af31505\loch\f37 Aggregate operations }{\rtlch\fcs1 \af34 \ltrch\fcs0 \f34\lang9\langfe16393\langnp9\insrsid1120764 \loch\af34\dbch\af31505\hich\f34 \u8722\'2d}{\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\lang9\langfe16393\langnp9\insrsid1120764 
\hich\af37\dbch\af31505\loch\f37  Stream supports aggregate operations like filter, map, limit, reduce, find, match, and so on.
\par {\pntext\pard\plain\ltrpar \rtlch\fcs1 \ab\af37\afs22 \ltrch\fcs0 \b\f37\fs22\lang9\langfe16393\langnp9 \hich\af37\dbch\af31505\loch\f37 4.\tab}}{\rtlch\fcs1 \ab\af37 \ltrch\fcs0 \b\f37\lang9\langfe16393\langnp9\insrsid1120764 
\hich\af37\dbch\af31505\loch\f37 Pipelining }{\rtlch\fcs1 \af34 \ltrch\fcs0 \f34\lang9\langfe16393\langnp9\insrsid1120764 \loch\af34\dbch\af31505\hich\f34 \u8722\'2d}{\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\lang9\langfe16393\langnp9\insrsid1120764 
\hich\af37\dbch\af31505\loch\f37  Most of the stream operations return stream it\hich\af37\dbch\af31505\loch\f37 
self so that their result can be pipelined. These operations are called intermediate operations and their function is to take input, process them, and return output to the target. collect() method is a terminal operation which is normally present at the e
\hich\af37\dbch\af31505\loch\f37 n\hich\af37\dbch\af31505\loch\f37 d of the pipelining operation to mark the end of the stream.
\par {\pntext\pard\plain\ltrpar \rtlch\fcs1 \ab\af37\afs22 \ltrch\fcs0 \b\f37\fs22\lang9\langfe16393\langnp9 \hich\af37\dbch\af31505\loch\f37 5.\tab}}{\rtlch\fcs1 \ab\af37 \ltrch\fcs0 \b\f37\lang9\langfe16393\langnp9\insrsid1120764 
\hich\af37\dbch\af31505\loch\f37 Automatic iterations }{\rtlch\fcs1 \af34 \ltrch\fcs0 \f34\lang9\langfe16393\langnp9\insrsid1120764 \loch\af34\dbch\af31505\hich\f34 \u8722\'2d}{\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\lang9\langfe16393\langnp9\insrsid1120764 
\hich\af37\dbch\af31505\loch\f37  Stream operations do the iterations internally over the source elements provided, in contrast to Collections where explicit iteration is required.}{\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\insrsid1120764 
\par }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\nowidctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \ab\af37\afs30 \ltrch\fcs0 \b\f37\fs30\insrsid1120764 \hich\af37\dbch\af31505\loch\f37 1. Java Stream vs. Col\hich\af37\dbch\af31505\loch\f37 
lection}{\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\insrsid1120764 
\par \hich\af37\dbch\af31505\loch\f37 The difference between Collections and Streams has to do with , is when things are computed.
\par \hich\af37\dbch\af31505\loch\f37  }{\rtlch\fcs1 \ab\ai\af37 \ltrch\fcs0 \b\i\f37\insrsid1120764 \hich\af37\dbch\af31505\loch\f37 A Collection is an in-memory data structure}{\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\insrsid1120764 
\hich\af37\dbch\af31505\loch\f37 , which holds all the values that the data structure currently has\hich\f37 \emdash }{\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\ul\insrsid1120764 \hich\af37\dbch\af31505\loch\f37 every element in the Collection has to be co
\hich\af37\dbch\af31505\loch\f37 mputed}{\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\insrsid1120764 \hich\af37\dbch\af31505\loch\f37  before it can be added to the Collection. 
\par }{\rtlch\fcs1 \ab\ai\af37 \ltrch\fcs0 \b\i\f37\insrsid1120764 \hich\af37\dbch\af31505\loch\f37 A Stream is a conceptually fixed data structure}{\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\insrsid1120764 \hich\af37\dbch\af31505\loch\f37 
, in which elements are computed on demand. This gives rise to significant programming benefits. The idea is that a user will }{\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\ul\insrsid1120764 \hich\af37\dbch\af31505\loch\f37 extract only the values they requ
\hich\af37\dbch\af31505\loch\f37 ire from a Stream}{\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\insrsid1120764 \hich\af37\dbch\af31505\loch\f37 , and these elements are only produced\hich\f37 \emdash \loch\f37 invisibly to the user\hich\f37 \emdash \loch\f37 
as and when required. This is a form of a producer-consumer relationship.
\par \hich\af37\dbch\af31505\loch\f37 In java, java.util.Stream represents a stream on which one or more operations can be performed. Stream o\hich\af37\dbch\af31505\loch\f37 perations are either intermediate or terminal. While T}{\rtlch\fcs1 \ai\af37 
\ltrch\fcs0 \i\f37\insrsid1120764 \hich\af37\dbch\af31505\loch\f37 erminal Operations return a result of a certain type}{\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\insrsid1120764 \hich\af37\dbch\af31505\loch\f37 , }{\rtlch\fcs1 \ai\af37 \ltrch\fcs0 
\i\f37\insrsid1120764 \hich\af37\dbch\af31505\loch\f37 Intermediate Operations return the stream itself }{\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\insrsid1120764 \hich\af37\dbch\af31505\loch\f37 
so you can chain multiple method calls in a row. Streams are created on a source, e.g. a java.util.\hich\af37\dbch\af31505\loch\f37 Collection like lists or sets (maps are not supported). Stream operations can either be executed sequential or parallel.

\par }{\rtlch\fcs1 \ab\af37 \ltrch\fcs0 \b\f37\ul\insrsid1120764 \hich\af37\dbch\af31505\loch\f37 The various characteristics of Stream are as follows:}{\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\insrsid1120764 
\par {\pntext\pard\plain\ltrpar \rtlch\fcs1 \af37\afs22 \ltrch\fcs0 \f3\fs22 \loch\af3\dbch\af31505\hich\f3 \'b7\tab}}\pard \ltrpar\ql \fi-360\li720\ri0\sa200\sl276\slmult1\nowidctlpar\wrapdefault{\*\pn \pnlvlblt\ilvl0\ls2\pnrnot0\pnf3 {\pntxtb \'b7}}
\faauto\ls2\rin0\lin720\itap0\pararsid2909569 {\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\insrsid1120764 \hich\af37\dbch\af31505\loch\f37 Not a data structure
\par {\pntext\pard\plain\ltrpar \rtlch\fcs1 \af37\afs22 \ltrch\fcs0 \f3\fs22 \loch\af3\dbch\af31505\hich\f3 \'b7\tab}\hich\af37\dbch\af31505\loch\f37 Designed for lambdas
\par {\pntext\pard\plain\ltrpar \rtlch\fcs1 \af37\afs22 \ltrch\fcs0 \f3\fs22 \loch\af3\dbch\af31505\hich\f3 \'b7\tab}\hich\af37\dbch\af31505\loch\f37 Do not support indexed access
\par {\pntext\pard\plain\ltrpar \rtlch\fcs1 \af37\afs22 \ltrch\fcs0 \f3\fs22 \loch\af3\dbch\af31505\hich\f3 \'b7\tab}\hich\af37\dbch\af31505\loch\f37 Can easily be outputted as arrays or lists
\par {\pntext\pard\plain\ltrpar \rtlch\fcs1 \af37\afs22 \ltrch\fcs0 \f3\fs22 \loch\af3\dbch\af31505\hich\f3 \'b7\tab}\hich\af37\dbch\af31505\loch\f37 Lazy access supported
\par {\pntext\pard\plain\ltrpar \rtlch\fcs1 \af37\afs22 \ltrch\fcs0 \f3\fs22 \loch\af3\dbch\af31505\hich\f3 \'b7\tab}\hich\af37\dbch\af31505\loch\f37 Parallelizable
\par }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\nowidctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\insrsid1120764 
\par }{\rtlch\fcs1 \ab\af37\afs30 \ltrch\fcs0 \b\f37\fs30\insrsid1120764 \hich\af37\dbch\af31505\loch\f37 2. Different ways to create/build streams from collections 
\par {\pntext\pard\plain\ltrpar \rtlch\fcs1 \ab\af37\afs22 \ltrch\fcs0 \f3\fs22 \loch\af3\dbch\af31505\hich\f3 \'b7\tab}}\pard \ltrpar\ql \fi-360\li720\ri0\sa200\sl276\slmult1\nowidctlpar\wrapdefault{\*\pn \pnlvlblt\ilvl0\ls2\pnrnot0\pnf3 {\pntxtb \'b7}}
\faauto\ls2\rin0\lin720\itap0\pararsid2909569 {\rtlch\fcs1 \ab\af37 \ltrch\fcs0 \b\f37\insrsid1120764 \hich\af37\dbch\af31505\loch\f37 \hich\f37 Stream.of(val1, val2, val3\'85\loch\f37 .)
\par }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\nowidctlpar\wrapdefault{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\insrsid1120764 \hich\af37\dbch\af31505\loch\f37 public class StreamBuilders
\par \{
\par \hich\af37\dbch\af31505\loch\f37      public static void main(String[] args)
\par \hich\af37\dbch\af31505\loch\f37      \{
\par \hich\af37\dbch\af31505\loch\f37          Stream<Integer> stream = Stream.of(1,2,3,4,5,6,7,8,9);
\par \hich\af37\dbch\af31505\loch\f37          stream.forEach(p -> System.out.println(p));
\par \hich\af37\dbch\af31505\loch\f37      \}
\par \}
\par {\pntext\pard\plain\ltrpar \rtlch\fcs1 \ab\af37\afs22 \ltrch\fcs0 \f3\fs22 \loch\af3\dbch\af31505\hich\f3 \'b7\tab}}\pard \ltrpar\ql \fi-360\li720\ri0\sa200\sl276\slmult1\nowidctlpar\wrapdefault{\*\pn \pnlvlblt\ilvl0\ls2\pnrnot0\pnf3 {\pntxtb \'b7}}
\faauto\ls2\rin0\lin720\itap0\pararsid2909569 {\rtlch\fcs1 \ab\af37 \ltrch\fcs0 \b\f37\insrsid1120764 \hich\af37\dbch\af31505\loch\f37 Stream.of(arrayOfElements)
\par }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\nowidctlpar\wrapdefault{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\insrsid1120764 \hich\af37\dbch\af31505\loch\f37 public class Stream
\hich\af37\dbch\af31505\loch\f37 Builders
\par \{
\par \hich\af37\dbch\af31505\loch\f37      public static void main(String[] args)
\par \hich\af37\dbch\af31505\loch\f37      \{
\par \hich\af37\dbch\af31505\loch\f37          Stream<Integer> stream = Stream.of( new Integer[]\{1,2,3,4,5,6,7,8,9\} );
\par \hich\af37\dbch\af31505\loch\f37          stream.forEach(p -> System.out.println(p));
\par \hich\af37\dbch\af31505\loch\f37      \}
\par \}
\par {\pntext\pard\plain\ltrpar \rtlch\fcs1 \ab\af37\afs22 \ltrch\fcs0 \f3\fs22 \loch\af3\dbch\af31505\hich\f3 \'b7\tab}}\pard \ltrpar\ql \fi-360\li720\ri0\sa200\sl276\slmult1\nowidctlpar\wrapdefault{\*\pn \pnlvlblt\ilvl0\ls2\pnrnot0\pnf3 {\pntxtb \'b7}}
\faauto\ls2\rin0\lin720\itap0\pararsid2909569 {\rtlch\fcs1 \ab\af37 \ltrch\fcs0 \b\f37\insrsid1120764 \hich\af37\dbch\af31505\loch\f37 List.stream()}{\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\insrsid1120764 
\par }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\nowidctlpar\wrapdefault{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\insrsid1120764 \hich\af37\dbch\af31505\loch\f37 public class StreamBuilders
\par \{
\par \hich\af37\dbch\af31505\loch\f37      public static void main(String[] args)
\par \hich\af37\dbch\af31505\loch\f37      \{
\par \hich\af37\dbch\af31505\loch\f37          List<Integer> list = new ArrayList<Integer>();
\par \hich\af37\dbch\af31505\loch\f37           for(int i = 1; i< 10; i++)\{
\par \hich\af37\dbch\af31505\loch\f37              list.add(i);
\par \hich\af37\dbch\af31505\loch\f37          \} 
\par \hich\af37\dbch\af31505\loch\f37          Stream<Integer> stream = list.stre\hich\af37\dbch\af31505\loch\f37 am();
\par \hich\af37\dbch\af31505\loch\f37          stream.forEach(p -> System.out.println(p));
\par \hich\af37\dbch\af31505\loch\f37      \}
\par \}
\par {\pntext\pard\plain\ltrpar \rtlch\fcs1 \ab\af37\afs22 \ltrch\fcs0 \f3\fs22 \loch\af3\dbch\af31505\hich\f3 \'b7\tab}}\pard \ltrpar\ql \fi-360\li720\ri0\sa200\sl276\slmult1\nowidctlpar\wrapdefault{\*\pn \pnlvlblt\ilvl0\ls2\pnrnot0\pnf3 {\pntxtb \'b7}}
\faauto\ls2\rin0\lin720\itap0\pararsid2909569 {\rtlch\fcs1 \ab\af37 \ltrch\fcs0 \b\f37\insrsid1120764 \hich\af37\dbch\af31505\loch\f37 Stream.generate() or Stream.iterate()
\par }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\nowidctlpar\wrapdefault{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\insrsid1120764 \hich\af37\dbch\af31505\loch\f37 public class StreamBuilders
\par \{
\par \hich\af37\dbch\af31505\loch\f37      public static void main(String[] args)
\par \hich\af37\dbch\af31505\loch\f37      \{
\par \hich\af37\dbch\af31505\loch\f37          Stream<Date> stream = Stream.generate(() -> \{ return new Date(); \});
\par \hich\af37\dbch\af31505\loch\f37          stream.forEach(p -> System.out.println(p));
\par \hich\af37\dbch\af31505\loch\f37      \}
\par \}
\par {\pntext\pard\plain\ltrpar \rtlch\fcs1 \ab\af37\afs22 \ltrch\fcs0 \f3\fs22 \loch\af3\dbch\af31505\hich\f3 \'b7\tab}}\pard \ltrpar\ql \fi-360\li720\ri0\sa200\sl276\slmult1\nowidctlpar\wrapdefault{\*\pn \pnlvlblt\ilvl0\ls2\pnrnot0\pnf3 {\pntxtb \'b7}}
\faauto\ls2\rin0\lin720\itap0\pararsid2909569 {\rtlch\fcs1 \ab\af37 \ltrch\fcs0 \b\f37\insrsid1120764 \hich\af37\dbch\af31505\loch\f37 String chars or String tokens
\par }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\nowidctlpar\wrapdefault{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\insrsid1120764 \hich\af37\dbch\af31505\loch\f37 public class StreamBuilders
\par \{
\par \hich\af37\dbch\af31505\loch\f37      public static void main(String[] args)
\par \hich\af37\dbch\af31505\loch\f37      \{
\par \hich\af37\dbch\af31505\loch\f37   \hich\af37\dbch\af31505\loch\f37       IntStream stream = "12345_abcdefg".chars();
\par \hich\af37\dbch\af31505\loch\f37         stream.forEach(p -> System.out.println(p))         
\par \hich\af37\dbch\af31505\loch\f37         //OR
\par \hich\af37\dbch\af31505\loch\f37         Stream<String> stream = Stream.of("A$B$C".split("\\\\$"));
\par \hich\af37\dbch\af31505\loch\f37         stream.forEach(p -> System.out.println(p));
\par \hich\af37\dbch\af31505\loch\f37      \}
\par \}
\par 
\par }{\rtlch\fcs1 \ab\af37\afs30 \ltrch\fcs0 \b\f37\fs30\insrsid1120764 \hich\af37\dbch\af31505\loch\f37 3. Convert streams to collections 
\par }{\rtlch\fcs1 \ai\af37\afs30 \ltrch\fcs0 \i\f37\fs30\ul\insrsid1120764 \hich\af37\dbch\af31505\loch\f37 (Please note that it is not a true conversion. It\hich\f37 \rquote \loch\f37 
s just collecting the elements from the stream into a collection or array.)}{\rtlch\fcs1 \ai\af37 \ltrch\fcs0 \i\f37\ul\insrsid1120764 
\par {\pntext\pard\plain\ltrpar \rtlch\fcs1 \ab\af37\afs22 \ltrch\fcs0 \f3\fs22 \loch\af3\dbch\af31505\hich\f3 \'b7\tab}}\pard \ltrpar\ql \fi-360\li720\ri0\sa200\sl276\slmult1\nowidctlpar\wrapdefault{\*\pn \pnlvlblt\ilvl0\ls2\pnrnot0\pnf3 {\pntxtb \'b7}}
\faauto\ls2\rin0\lin720\itap0\pararsid2909569 {\rtlch\fcs1 \ab\af37 \ltrch\fcs0 \b\f37\insrsid1120764 \hich\af37\dbch\af31505\loch\f37 Convert Stream to List \hich\f37 \endash \loch\f37  Stream.collect( Collectors.toList() )
\par }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\nowidctlpar\wrapdefault{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\insrsid1120764 \hich\af37\dbch\af31505\loch\f37 public class StreamBuilders \{

\par \hich\af37\dbch\af31505\loch\f37      public static void main(String[] args)\{
\par \hich\af37\dbch\af31505\loch\f37          List<Integer> list = new ArrayList<Integer>();
\par \hich\af37\dbch\af31505\loch\f37          for(int i = 1; i< 10; i++)\{
\par \hich\af37\dbch\af31505\loch\f37              list.add(i);
\par \hich\af37\dbch\af31505\loch\f37          \}
\par \hich\af37\dbch\af31505\loch\f37          Stream<Integer> stream = list.stream();
\par \hich\af37\dbch\af31505\loch\f37          List<Integer> evenNumb\hich\af37\dbch\af31505\loch\f37 ersList = stream.filter(i -> i%2 == 0).collect(Collectors.toList());
\par \hich\af37\dbch\af31505\loch\f37          System.out.print(evenNumbersList);
\par \hich\af37\dbch\af31505\loch\f37      \}
\par \}
\par {\pntext\pard\plain\ltrpar \rtlch\fcs1 \ab\af37\afs22 \ltrch\fcs0 \f3\fs22 \loch\af3\dbch\af31505\hich\f3 \'b7\tab}}\pard \ltrpar\ql \fi-360\li720\ri0\sa200\sl276\slmult1\nowidctlpar\wrapdefault{\*\pn \pnlvlblt\ilvl0\ls2\pnrnot0\pnf3 {\pntxtb \'b7}}
\faauto\ls2\rin0\lin720\itap0\pararsid2909569 {\rtlch\fcs1 \ab\af37 \ltrch\fcs0 \b\f37\insrsid1120764 \hich\af37\dbch\af31505\loch\f37 Convert Stream to array \hich\f37 \endash \loch\f37  Stream.toArray( EntryType[]::new )
\par }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\nowidctlpar\wrapdefault{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\insrsid1120764 \hich\af37\dbch\af31505\loch\f37 public class StreamBuilders \{

\par \hich\af37\dbch\af31505\loch\f37      public static void main(String[] args)\{
\par \hich\af37\dbch\af31505\loch\f37          List<Integer> list = new ArrayList<Integer>();
\par \hich\af37\dbch\af31505\loch\f37          for(int i = 1; i< 10; i++)\{
\par \hich\af37\dbch\af31505\loch\f37              list.add(i);
\par \hich\af37\dbch\af31505\loch\f37          \}
\par \hich\af37\dbch\af31505\loch\f37          Stream<Integer> stream = list.stream();
\par \hich\af37\dbch\af31505\loch\f37          Integer[] evenNumbersAr\hich\af37\dbch\af31505\loch\f37 r = stream.filter(i -> i%2 == 0).toArray(Integer[]::new);
\par \hich\af37\dbch\af31505\loch\f37          System.out.print(evenNumbersArr);
\par \hich\af37\dbch\af31505\loch\f37      \}
\par \}
\par 
\par }{\rtlch\fcs1 \ab\af37\afs30 \ltrch\fcs0 \b\f37\fs30\insrsid1120764 \hich\af37\dbch\af31505\loch\f37 4. Core stream operations
\par }{\rtlch\fcs1 \ab\af37\afs24 \ltrch\fcs0 \b\f37\fs24\insrsid1120764 \hich\af37\dbch\af31505\loch\f37 4.1. Intermediate operations
\par }{\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\insrsid1120764 \hich\af37\dbch\af31505\loch\f37 Intermediate operations return the stream itself so you can chain multiple method calls in\hich\af37\dbch\af31505\loch\f37  a row.
\par \hich\af37\dbch\af31505\loch\f37 4.1.1. Stream.filter()
\par \hich\af37\dbch\af31505\loch\f37 Filter accepts a predicate to filter all elements of the stream. This operation is intermediate which enables us to call another stream operation (e.g. forEach) on the result.
\par \hich\af37\dbch\af31505\loch\f37 4.1.2. Stream.map()
\par \hich\af37\dbch\af31505\loch\f37 The map method is used to map\hich\af37\dbch\af31505\loch\f37  the items in the collection to other objects according to the Predicate passed as argument.
\par \hich\af37\dbch\af31505\loch\f37 4.1.3. Stream.sorted()
\par \hich\af37\dbch\af31505\loch\f37 Sorted is an intermediate operation which returns a sorted view of the stream. The elements are sorted in natural order unless you pass a cu\hich\af37\dbch\af31505\loch\f37 stom Comparator.
\par 
\par }{\rtlch\fcs1 \ab\af37\afs24 \ltrch\fcs0 \b\f37\fs24\insrsid1120764 \hich\af37\dbch\af31505\loch\f37 4.2. Terminal operations
\par }{\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\insrsid1120764 \hich\af37\dbch\af31505\loch\f37 Terminal operations return a result of a certain type instead of again a Stream.
\par \hich\af37\dbch\af31505\loch\f37 4.2.1. Stream.forEach()
\par \hich\af37\dbch\af31505\loch\f37 This method helps in iterating over all elements of a stream and perform some operation on each of them. The\hich\af37\dbch\af31505\loch\f37  operation is passed as lambda expression parameter.
\par \hich\af37\dbch\af31505\loch\f37 4.2.2. Stream.collect()
\par \hich\af37\dbch\af31505\loch\f37 collect() method used to receive elements from a steam and store them in a collection and mentioned in parameter function.
\par \hich\af37\dbch\af31505\loch\f37 4.2.3. Stream.match()
\par \hich\af37\dbch\af31505\loch\f37 Various matching operations can be used to check whether a certain predicate matches the stream. All of those operations are terminal and return a boolean result.
\par \hich\af37\dbch\af31505\loch\f37 4.2.4. Stream.count()
\par \hich\af37\dbch\af31505\loch\f37 Count is a terminal operation returning the number of elements in the s\hich\af37\dbch\af31505\loch\f37 tream as a long.
\par \hich\af37\dbch\af31505\loch\f37 4.2.5. Stream.reduce()
\par \hich\af37\dbch\af31505\loch\f37 This terminal operation performs a reduction on the elements of the stream with the given function. The result is an Optional holding the reduced value.
\par 
\par 
\par }{\rtlch\fcs1 \ab\af37\afs30 \ltrch\fcs0 \b\f37\fs30\insrsid1120764 \hich\af37\dbch\af31505\loch\f37 5. Stream short-circuit operations
\par }{\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\insrsid1120764 \hich\af37\dbch\af31505\loch\f37 Though, stream operations \hich\af37\dbch\af31505\loch\f37 
are performed on all elements inside a collection satisfying a predicate, It is often desired to break the operation whenever a matching element is encountered during iteration. }{\rtlch\fcs1 \ai\af37 \ltrch\fcs0 \i\f37\insrsid1120764 
\hich\af37\dbch\af31505\loch\f37 In external iteration}{\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\insrsid1120764 \hich\af37\dbch\af31505\loch\f37 , you will do with if-else block. }{\rtlch\fcs1 \ai\af37 \ltrch\fcs0 \i\f37\insrsid1120764 
\hich\af37\dbch\af31505\loch\f37 In internal iteration}{\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\insrsid1120764 \hich\af37\dbch\af31505\loch\f37 , \hich\af37\dbch\af31505\loch\f37 there are certain methods we use for this purpose.
\par \hich\af37\dbch\af31505\loch\f37 5.1. Stream.anyMatch()
\par \hich\af37\dbch\af31505\loch\f37 This will return true once a condition passed as predicate satisfy. It will not process any more elements.
\par 
\par \hich\af37\dbch\af31505\loch\f37 5.2. Stream.findFirst()
\par \hich\af37\dbch\af31505\loch\f37 It will return first element from stream and then \hich\af37\dbch\af31505\loch\f37 will not process any more element.
\par 
\par }{\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\insrsid1517842 
\par }\pard \ltrpar\qc \li0\ri0\sa200\sl276\slmult1\nowidctlpar\wrapdefault{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\faauto\rin0\lin0\itap0\pararsid1517842 {\rtlch\fcs1 \ab\af37\afs40 \ltrch\fcs0 \b\f37\fs40\lang9\langfe16393\langnp9\insrsid1517842 
\hich\af37\dbch\af31505\loch\f37 Java Stream allMatch() API}{\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\lang9\langfe16393\langnp9\insrsid1517842 
\par }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\nowidctlpar\wrapdefault{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\faauto\rin0\lin0\itap0\pararsid1517842 {\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\lang9\langfe16393\langnp9\insrsid1517842 
\hich\af37\dbch\af31505\loch\f37 Java Stream allMatch (Predicate predicate) is \hich\af37\dbch\af31505\loch\f37 short-circuiting terminal operation which is used to check if all the elements of the stream match the provided predicate.
\par }{\rtlch\fcs1 \ab\af37\afs28 \ltrch\fcs0 \b\f37\fs28\lang9\langfe16393\langnp9\insrsid1517842 
\par \hich\af37\dbch\af31505\loch\f37 1. Stream allMatch() method
\par }{\rtlch\fcs1 \ab\af37 \ltrch\fcs0 \b\f37\lang9\langfe16393\langnp9\insrsid1517842 \hich\af37\dbch\af31505\loch\f37 1.1. Syntax}{\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\lang9\langfe16393\langnp9\insrsid1517842 
\par }{\rtlch\fcs1 \ai\af37 \ltrch\fcs0 \i\f37\lang9\langfe16393\langnp9\insrsid1517842 \hich\af37\dbch\af31505\loch\f37 syntax: }{\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\lang9\langfe16393\langnp9\insrsid1517842 \hich\af37\dbch\af31505\loch\f37 
boolean allMatch(Predicate<? super T> predicate)
\par \hich\af37\dbch\af31505\loch\f37 Here predicate a non-interfering, s\hich\af37\dbch\af31505\loch\f37 tateless predicate to apply to elements of the stream.
\par }{\rtlch\fcs1 \ab\af37 \ltrch\fcs0 \b\f37\lang9\langfe16393\langnp9\insrsid1517842 
\par \hich\af37\dbch\af31505\loch\f37 1.2. Description
\par {\pntext\pard\plain\ltrpar \rtlch\fcs1 \af37\afs22 \ltrch\fcs0 \f3\fs22\lang9\langfe16393\langnp9\insrsid1517842 \loch\af3\dbch\af31505\hich\f3 \'b7\tab}}\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\nowidctlpar\wrapdefault{\*\pn 
\pnlvlblt\ilvl0\ls2\pnrnot0\pnf3 {\pntxtb \'b7}}\faauto\ls2\rin0\lin0\itap0\pararsid1517842 {\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\lang9\langfe16393\langnp9\insrsid1517842 \hich\af37\dbch\af31505\loch\f37 It is a short-circuiting terminal operation.
\par {\pntext\pard\plain\ltrpar \rtlch\fcs1 \af37\afs22 \ltrch\fcs0 \f3\fs22\lang9\langfe16393\langnp9\insrsid1517842 \loch\af3\dbch\af31505\hich\f3 \'b7\tab}}\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\nowidctlpar\wrapdefault{\*\pn 
\pnlvlblt\ilvl0\ls2\pnrnot0\pnf3 {\pntxtb \'b7}}\faauto\ls2\rin0\lin0\itap0\pararsid1517842 {\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\lang9\langfe16393\langnp9\insrsid1517842 \hich\af37\dbch\af31505\loch\f37 
It returns whether all elements of this stream match the provided predicate.
\par {\pntext\pard\plain\ltrpar \rtlch\fcs1 \af37\afs22 \ltrch\fcs0 \f3\fs22\lang9\langfe16393\langnp9\insrsid1517842 \loch\af3\dbch\af31505\hich\f3 \'b7\tab}}\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\nowidctlpar\wrapdefault{\*\pn 
\pnlvlblt\ilvl0\ls2\pnrnot0\pnf3 {\pntxtb \'b7}}\faauto\ls2\rin0\lin0\itap0\pararsid1517842 {\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\lang9\langfe16393\langnp9\insrsid1517842 \hich\af37\dbch\af31505\loch\f37 
May not evaluate the predicate on all elements if not necessa\hich\af37\dbch\af31505\loch\f37 ry for determining the result. Method returns true if all stream elements match the given predicate, else method returns false.
\par {\pntext\pard\plain\ltrpar \rtlch\fcs1 \af37\afs22 \ltrch\fcs0 \f3\fs22\lang9\langfe16393\langnp9\insrsid1517842 \loch\af3\dbch\af31505\hich\f3 \'b7\tab}}\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\nowidctlpar\wrapdefault{\*\pn 
\pnlvlblt\ilvl0\ls2\pnrnot0\pnf3 {\pntxtb \'b7}}\faauto\ls2\rin0\lin0\itap0\pararsid1517842 {\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\lang9\langfe16393\langnp9\insrsid1517842 \hich\af37\dbch\af31505\loch\f37 
If the stream is empty then true is returned and the predicate is not evaluated.
\par }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\nowidctlpar\wrapdefault{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\faauto\rin0\lin0\itap0\pararsid1517842 {\rtlch\fcs1 \ab\af37\afs28 \ltrch\fcs0 \b\f37\fs28\lang9\langfe16393\langnp9\insrsid1517842 
\par \hich\af37\dbch\af31505\loch\f37 2. Stream allMatch() example}{\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\lang9\langfe16393\langnp9\insrsid1517842 
\par \hich\af37\dbch\af31505\loch\f37 Java example of S\hich\af37\dbch\af31505\loch\f37 tream.allMatch() method to check if all stream elements does not contain any numeric/digit character.
\par 
\par \hich\af37\dbch\af31505\loch\f37 import java.util.stream.Stream; 
\par \hich\af37\dbch\af31505\loch\f37 public class Main
\par \{
\par \hich\af37\dbch\af31505\loch\f37     public static void main(String[] args)
\par \hich\af37\dbch\af31505\loch\f37     \{
\par \hich\af37\dbch\af31505\loch\f37         Stream<String> stream = Stream.of("one", "t\hich\af37\dbch\af31505\loch\f37 wo", "three", "four");    
\par \hich\af37\dbch\af31505\loch\f37         boolean match = stream.allMatch(s -> s.contains("\\\\d+") == false );
\par \hich\af37\dbch\af31505\loch\f37         System.out.println(match);      //true
\par \hich\af37\dbch\af31505\loch\f37     \}
\par \}
\par 
\par }{\rtlch\fcs1 \ab\ai\af37\afs30 \ltrch\fcs0 \b\i\f37\fs30\lang9\langfe16393\langnp9\insrsid1517842\charrsid1517842 \hich\af37\dbch\af31505\loch\f37 Program output:}{\rtlch\fcs1 \af37\afs30 \ltrch\fcs0 
\f37\fs30\lang9\langfe16393\langnp9\insrsid1517842\charrsid1517842 
\par \hich\af37\dbch\af31505\loch\f37 true
\par }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\nowidctlpar\wrapdefault{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\insrsid1120764 
\par }\pard \ltrpar\qc \li0\ri0\sa200\sl276\slmult1\nowidctlpar\wrapdefault{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \ab\af37\afs30 \ltrch\fcs0 \b\f37\fs30\insrsid1120764 
\par }\pard \ltrpar\qc \li0\ri0\sa200\sl276\slmult1\nowidctlpar\wrapdefault{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\faauto\rin0\lin0\itap0\pararsid1517842 {\rtlch\fcs1 \ab\af37\afs40 \ltrch\fcs0 \b\f37\fs40\lang9\langfe16393\langnp9\insrsid1517842 
\hich\af37\dbch\af31505\loch\f37 Java Stream anyMatch() API}{\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\lang9\langfe16393\langnp9\insrsid1517842 
\par }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\nowidctlpar\wrapdefault{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\faauto\rin0\lin0\itap0\pararsid1517842 {\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\lang9\langfe16393\langnp9\insrsid1517842 
\hich\af37\dbch\af31505\loch\f37 Java Stream anyMatch (Predicate predicate) is terminal-short-circuiting operation which is used to check if the stream contains any matching element with provided predicate.
\par 
\par }{\rtlch\fcs1 \ab\af37\afs28 \ltrch\fcs0 \b\f37\fs28\lang9\langfe16393\langnp9\insrsid1517842 \hich\af37\dbch\af31505\loch\f37 1. Stream anyMatch() method}{\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\lang9\langfe16393\langnp9\insrsid1517842 
\par }{\rtlch\fcs1 \ab\af37 \ltrch\fcs0 \b\f37\lang9\langfe16393\langnp9\insrsid1517842 \hich\af37\dbch\af31505\loch\f37 1.1. Syntax
\par }\pard \ltrpar\ql \li720\ri0\sa200\sl276\slmult1\nowidctlpar\wrapdefault{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\faauto\rin0\lin720\itap0\pararsid1517842 {\rtlch\fcs1 \ai\af37 \ltrch\fcs0 \i\f37\lang9\langfe16393\langnp9\insrsid1517842 
\hich\af37\dbch\af31505\loch\f37  syntax: }{\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\lang9\langfe16393\langnp9\insrsid1517842 \hich\af37\dbch\af31505\loch\f37 boolean anyMatch(Predicate<? super T> predicate)
\par }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\nowidctlpar\wrapdefault{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\faauto\rin0\lin0\itap0\pararsid1517842 {\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\lang9\langfe16393\langnp9\insrsid1517842 
\hich\af37\dbch\af31505\loch\f37 Here predicate a non-interfering, stateless predicate to apply to elements of the stream.
\par }{\rtlch\fcs1 \ab\af37 \ltrch\fcs0 \b\f37\lang9\langfe16393\langnp9\insrsid1517842 
\par \hich\af37\dbch\af31505\loch\f37 1.2. Description
\par {\pntext\pard\plain\ltrpar \rtlch\fcs1 \af37\afs22 \ltrch\fcs0 \f3\fs22\lang9\langfe16393\langnp9\insrsid1517842 \loch\af3\dbch\af31505\hich\f3 \'b7\tab}}\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\nowidctlpar\wrapdefault{\*\pn 
\pnlvlblt\ilvl0\ls2\pnrnot0\pnf3 {\pntxtb \'b7}}\faauto\ls2\rin0\lin0\itap0\pararsid1517842 {\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\lang9\langfe16393\langnp9\insrsid1517842 \hich\af37\dbch\af31505\loch\f37 It is a short-circuiting terminal operation.
\par {\pntext\pard\plain\ltrpar \rtlch\fcs1 \af37\afs22 \ltrch\fcs0 \f3\fs22\lang9\langfe16393\langnp9\insrsid1517842 \loch\af3\dbch\af31505\hich\f3 \'b7\tab}}\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\nowidctlpar\wrapdefault{\*\pn 
\pnlvlblt\ilvl0\ls2\pnrnot0\pnf3 {\pntxtb \'b7}}\faauto\ls2\rin0\lin0\itap0\pararsid1517842 {\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\lang9\langfe16393\langnp9\insrsid1517842 \hich\af37\dbch\af31505\loch\f37 
It returns whether any elements of this stream match t\hich\af37\dbch\af31505\loch\f37 he provided predicate.
\par {\pntext\pard\plain\ltrpar \rtlch\fcs1 \af37\afs22 \ltrch\fcs0 \f3\fs22\lang9\langfe16393\langnp9\insrsid1517842 \loch\af3\dbch\af31505\hich\f3 \'b7\tab}}\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\nowidctlpar\wrapdefault{\*\pn 
\pnlvlblt\ilvl0\ls2\pnrnot0\pnf3 {\pntxtb \'b7}}\faauto\ls2\rin0\lin0\itap0\pararsid1517842 {\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\lang9\langfe16393\langnp9\insrsid1517842 \hich\af37\dbch\af31505\loch\f37 
May not evaluate the predicate on all elements if not necessary for determining the result. Method returns true as soon as first matching element is encountered.
\par {\pntext\pard\plain\ltrpar \rtlch\fcs1 \af37\afs22 \ltrch\fcs0 \f3\fs22\lang9\langfe16393\langnp9\insrsid1517842 \loch\af3\dbch\af31505\hich\f3 \'b7\tab}}\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\nowidctlpar\wrapdefault{\*\pn 
\pnlvlblt\ilvl0\ls2\pnrnot0\pnf3 {\pntxtb \'b7}}\faauto\ls2\rin0\lin0\itap0\pararsid1517842 {\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\lang9\langfe16393\langnp9\insrsid1517842 \hich\af37\dbch\af31505\loch\f37 
If the stream is empty then false is returned and the predicate is not \hich\af37\dbch\af31505\loch\f37 evaluated.
\par }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\nowidctlpar\wrapdefault{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\faauto\rin0\lin0\itap0\pararsid1517842 {\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\lang9\langfe16393\langnp9\insrsid1517842 
\par }{\rtlch\fcs1 \ab\af37\afs28 \ltrch\fcs0 \b\f37\fs28\lang9\langfe16393\langnp9\insrsid1517842 \hich\af37\dbch\af31505\loch\f37 2. Java Stream anyMatch() example}{\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\lang9\langfe16393\langnp9\insrsid1517842 
\par \hich\af37\dbch\af31505\loch\f37 Java example of Stream.anyMatch() method to check if any stream element match the method argument predicate.
\par 
\par \hich\af37\dbch\af31505\loch\f37 import java.util.stream.Stream; 
\par \hich\af37\dbch\af31505\loch\f37 public class Main
\par \{
\par \hich\af37\dbch\af31505\loch\f37     public \hich\af37\dbch\af31505\loch\f37 static void main(String[] args)
\par \hich\af37\dbch\af31505\loch\f37     \{
\par \hich\af37\dbch\af31505\loch\f37         Stream<String> stream = Stream.of("one", "two", "three", "four");
\par \hich\af37\dbch\af31505\loch\f37         boolean match = stream.anyMatch(s -> s.contains("four"));
\par \hich\af37\dbch\af31505\loch\f37         System.out.println(match);      //true
\par \hich\af37\dbch\af31505\loch\f37     \}
\par \}
\par 
\par }{\rtlch\fcs1 \ab\ai\af37 \ltrch\fcs0 \b\i\f37\lang9\langfe16393\langnp9\insrsid1517842 \hich\af37\dbch\af31505\loch\f37 Program output:}{\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\lang9\langfe16393\langnp9\insrsid1517842 
\par \hich\af37\dbch\af31505\loch\f37 true
\par }{\rtlch\fcs1 \ab\af37 \ltrch\fcs0 \b\f37\lang9\langfe16393\langnp9\insrsid1517842 
\par \hich\af37\dbch\af31505\loch\f37 3. Difference between anyMatch() vs contains()
\par }{\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\lang9\langfe16393\langnp9\insrsid1517842 \hich\af37\dbch\af31505\loch\f37 Theoretically, there is no difference between anyMatch() and contains() when we want to check if an element exist in a list.
\par \hich\af37\dbch\af31505\loch\f37 Parallelism might bring an advantage for really large lists, but we should not casua\hich\af37\dbch\af31505\loch\f37 
lly use the Stream.parallel() every time and there assuming that it may make things faster. In fact, invoking parallel() may bring down the performance for small streams.
\par }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\nowidctlpar\wrapdefault{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\insrsid1120764 
\par 
\par }\pard \ltrpar\qc \li0\ri0\sa200\sl276\slmult1\nowidctlpar\wrapdefault{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\faauto\rin0\lin0\itap0\pararsid1517842 {\rtlch\fcs1 \ab\af37\afs40 \ltrch\fcs0 \b\f37\fs40\lang9\langfe16393\langnp9\insrsid1517842 
\hich\af37\dbch\af31505\loch\f37 Java Stream.forEach()}{\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\lang9\langfe16393\langnp9\insrsid1517842 
\par }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\nowidctlpar\wrapdefault{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\faauto\rin0\lin0\itap0\pararsid1517842 {\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\lang9\langfe16393\langnp9\insrsid1517842 
\hich\af37\dbch\af31505\loch\f37 Stream.forEach(Consumer action) is a method to traverse all the elements of stream and performs an action for each element of this stream.
\par 
\par }{\rtlch\fcs1 \ab\af37\afs28 \ltrch\fcs0 \b\f37\fs28\lang9\langfe16393\langnp9\insrsid1517842 \hich\af37\dbch\af31505\loch\f37 1. Stream.forEach() method}{\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\lang9\langfe16393\langnp9\insrsid1517842 
\par {\pntext\pard\plain\ltrpar \rtlch\fcs1 \af37\afs22 \ltrch\fcs0 \f3\fs22\lang9\langfe16393\langnp9\insrsid1517842 \loch\af3\dbch\af31505\hich\f3 \'b7\tab}}\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\nowidctlpar\wrapdefault{\*\pn 
\pnlvlblt\ilvl0\ls2\pnrnot0\pnf3 {\pntxtb \'b7}}\faauto\ls2\rin0\lin0\itap0\pararsid1517842 {\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\lang9\langfe16393\langnp9\insrsid1517842 \hich\af37\dbch\af31505\loch\f37 This is a terminal operation.
\par {\pntext\pard\plain\ltrpar \rtlch\fcs1 \af37\afs22 \ltrch\fcs0 \f3\fs22\lang9\langfe16393\langnp9\insrsid1517842 \loch\af3\dbch\af31505\hich\f3 \'b7\tab}}\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\nowidctlpar\wrapdefault{\*\pn 
\pnlvlblt\ilvl0\ls2\pnrnot0\pnf3 {\pntxtb \'b7}}\faauto\ls2\rin0\lin0\itap0\pararsid1517842 {\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\lang9\langfe16393\langnp9\insrsid1517842 \hich\af37\dbch\af31505\loch\f37 
After forEach() is performed, the stream pipeline is consid\hich\af37\dbch\af31505\loch\f37 ered consumed, and can no longer be used.
\par {\pntext\pard\plain\ltrpar \rtlch\fcs1 \af37\afs22 \ltrch\fcs0 \f3\fs22\lang9\langfe16393\langnp9\insrsid1517842 \loch\af3\dbch\af31505\hich\f3 \'b7\tab}}\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\nowidctlpar\wrapdefault{\*\pn 
\pnlvlblt\ilvl0\ls2\pnrnot0\pnf3 {\pntxtb \'b7}}\faauto\ls2\rin0\lin0\itap0\pararsid1517842 {\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\lang9\langfe16393\langnp9\insrsid1517842 \hich\af37\dbch\af31505\loch\f37 
If we need to traverse the same data source again, we must return to the data source to get a new stream.
\par {\pntext\pard\plain\ltrpar \rtlch\fcs1 \af37\afs22 \ltrch\fcs0 \f3\fs22\lang9\langfe16393\langnp9\insrsid1517842 \loch\af3\dbch\af31505\hich\f3 \'b7\tab}}\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\nowidctlpar\wrapdefault{\*\pn 
\pnlvlblt\ilvl0\ls2\pnrnot0\pnf3 {\pntxtb \'b7}}\faauto\ls2\rin0\lin0\itap0\pararsid1517842 {\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\lang9\langfe16393\langnp9\insrsid1517842 \hich\af37\dbch\af31505\loch\f37 
For parallel stream pipelines, forEach() operation does not guarantee the order of elements in the stream, a\hich\af37\dbch\af31505\loch\f37 s doing so would sacrifice the benefit of parallelism.
\par {\pntext\pard\plain\ltrpar \rtlch\fcs1 \af37\afs22 \ltrch\fcs0 \f3\fs22\lang9\langfe16393\langnp9\insrsid1517842 \loch\af3\dbch\af31505\hich\f3 \'b7\tab}}\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\nowidctlpar\wrapdefault{\*\pn 
\pnlvlblt\ilvl0\ls2\pnrnot0\pnf3 {\pntxtb \'b7}}\faauto\ls2\rin0\lin0\itap0\pararsid1517842 {\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\lang9\langfe16393\langnp9\insrsid1517842 \hich\af37\dbch\af31505\loch\f37 
If the provided action (method argument) accesses shared state between elements, it is responsible for providing the required synchronization.
\par }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\nowidctlpar\wrapdefault{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\faauto\rin0\lin0\itap0\pararsid1517842 {\rtlch\fcs1 \ab\af37\afs28 \ltrch\fcs0 \b\f37\fs28\lang9\langfe16393\langnp9\insrsid1517842 
\par \hich\af37\dbch\af31505\loch\f37 2. forEach() method syntax
\par }{\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\lang9\langfe16393\langnp9\insrsid1517842 \hich\af37\dbch\af31505\loch\f37 Consumer is a functional inter\hich\af37\dbch\af31505\loch\f37 
face and action represents the a non-interfering action to be performed on each element in the stream.
\par }\pard \ltrpar\ql \li720\ri0\sa200\sl276\slmult1\nowidctlpar\wrapdefault{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\faauto\rin0\lin720\itap0\pararsid1517842 {\rtlch\fcs1 \ai\af37 \ltrch\fcs0 \i\f37\lang9\langfe16393\langnp9\insrsid1517842 
\hich\af37\dbch\af31505\loch\f37 Syntax: }{\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\lang9\langfe16393\langnp9\insrsid1517842 \hich\af37\dbch\af31505\loch\f37 void forEach(Consumer<? super T> action)
\par }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\nowidctlpar\wrapdefault{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\faauto\rin0\lin0\itap0\pararsid1517842 {\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\lang9\langfe16393\langnp9\insrsid1517842 
\par }{\rtlch\fcs1 \ab\af37\afs28 \ltrch\fcs0 \b\f37\fs28\lang9\langfe16393\langnp9\insrsid1517842 \hich\af37\dbch\af31505\loch\f37 3. Stream forEach() method example}{\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\lang9\langfe16393\langnp9\insrsid1517842 
\par }{\rtlch\fcs1 \ab\af37 \ltrch\fcs0 \b\f37\lang9\langfe16393\langnp9\insrsid1517842 \hich\af37\dbch\af31505\loch\f37 3.1. Traverse and print all elements}{\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\lang9\langfe16393\langnp9\insrsid1517842 
\par \hich\af37\dbch\af31505\loch\f37 Java example to iterate over st\hich\af37\dbch\af31505\loch\f37 ream elements and print them.
\par 
\par \hich\af37\dbch\af31505\loch\f37 List<Integer> list = Arrays.asList(2, 4, 6, 8, 10); 
\par \hich\af37\dbch\af31505\loch\f37 list.stream().forEach( System.out::println );
\par 
\par \hich\af37\dbch\af31505\loch\f37 Program output:
\par \hich\af37\dbch\af31505\loch\f37 2
\par \hich\af37\dbch\af31505\loch\f37 4
\par \hich\af37\dbch\af31505\loch\f37 6
\par \hich\af37\dbch\af31505\loch\f37 8
\par \hich\af37\dbch\af31505\loch\f37 10
\par 
\par }{\rtlch\fcs1 \ab\af37 \ltrch\fcs0 \b\f37\lang9\langfe16393\langnp9\insrsid1517842 \hich\af37\dbch\af31505\loch\f37 3.2. Traverse and print all elements in reverse order}{\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\lang9\langfe16393\langnp9\insrsid1517842 
\par \hich\af37\dbch\af31505\loch\f37 Java example to iterate over stream elements and print them in reverse order.
\par 
\par \hich\af37\dbch\af31505\loch\f37 List<Integer> list = Arrays.asList(2, 4, 6, 8, 10);
\par \hich\af37\dbch\af31505\loch\f37 list.stream()
\par \hich\af37\dbch\af31505\loch\f37         .sorted(Comparator.reverseOrder())
\par \hich\af37\dbch\af31505\loch\f37         .forEach(System.out::println);
\par 
\par \hich\af37\dbch\af31505\loch\f37 Program output.
\par \hich\af37\dbch\af31505\loch\f37 10
\par \hich\af37\dbch\af31505\loch\f37 8
\par \hich\af37\dbch\af31505\loch\f37 6
\par \hich\af37\dbch\af31505\loch\f37 4
\par \hich\af37\dbch\af31505\loch\f37 2
\par }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\nowidctlpar\wrapdefault{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\insrsid1120764 
\par }{\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\insrsid1517842 
\par 
\par }\pard \ltrpar\qc \li0\ri0\sa200\sl276\slmult1\nowidctlpar\wrapdefault{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\faauto\rin0\lin0\itap0\pararsid1517842 {\rtlch\fcs1 \ab\af37\afs40 \ltrch\fcs0 \b\f37\fs40\lang9\langfe16393\langnp9\insrsid1517842 
\hich\af37\dbch\af31505\loch\f37 Java Stream filter() example
\par }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\nowidctlpar\wrapdefault{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\faauto\rin0\lin0\itap0\pararsid1517842 {\rtlch\fcs1 \af37\afs24 \ltrch\fcs0 \f37\fs24\lang9\langfe16393\langnp9\insrsid1517842 
\hich\af37\dbch\af31505\loch\f37 Stream.filter(Predicate condition) method is used to traverse all the elements and filter out all elements which do not match a given condition through Predicate argument.
\par 
\par }{\rtlch\fcs1 \ab\af37\afs32 \ltrch\fcs0 \b\f37\fs32\lang9\langfe16393\langnp9\insrsid1517842 \hich\af37\dbch\af31505\loch\f37 1. Stream filter() method}{\rtlch\fcs1 \af37\afs24 \ltrch\fcs0 \f37\fs24\lang9\langfe16393\langnp9\insrsid1517842 
\par {\pntext\pard\plain\ltrpar \rtlch\fcs1 \af37 \ltrch\fcs0 \f3\lang9\langfe16393\langnp9\insrsid1517842 \loch\af3\dbch\af31505\hich\f3 \'b7\tab}}\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\nowidctlpar\wrapdefault{\*\pn \pnlvlblt\ilvl0\ls2\pnrnot0\pnf3 
{\pntxtb \'b7}}\faauto\ls2\rin0\lin0\itap0\pararsid1517842 {\rtlch\fcs1 \af37\afs24 \ltrch\fcs0 \f37\fs24\lang9\langfe16393\langnp9\insrsid1517842 \hich\af37\dbch\af31505\loch\f37 This is a intermediate opera\hich\af37\dbch\af31505\loch\f37 tion.
\par {\pntext\pard\plain\ltrpar \rtlch\fcs1 \af37 \ltrch\fcs0 \f3\lang9\langfe16393\langnp9\insrsid1517842 \loch\af3\dbch\af31505\hich\f3 \'b7\tab}}\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\nowidctlpar\wrapdefault{\*\pn \pnlvlblt\ilvl0\ls2\pnrnot0\pnf3 
{\pntxtb \'b7}}\faauto\ls2\rin0\lin0\itap0\pararsid1517842 {\rtlch\fcs1 \af37\afs24 \ltrch\fcs0 \f37\fs24\lang9\langfe16393\langnp9\insrsid1517842 \hich\af37\dbch\af31505\loch\f37 
Returns a stream consisting of the elements of this stream that match the given predicate.
\par {\pntext\pard\plain\ltrpar \rtlch\fcs1 \af37 \ltrch\fcs0 \f3\lang9\langfe16393\langnp9\insrsid1517842 \loch\af3\dbch\af31505\hich\f3 \'b7\tab}}\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\nowidctlpar\wrapdefault{\*\pn \pnlvlblt\ilvl0\ls2\pnrnot0\pnf3 
{\pntxtb \'b7}}\faauto\ls2\rin0\lin0\itap0\pararsid1517842 {\rtlch\fcs1 \af37\afs24 \ltrch\fcs0 \f37\fs24\lang9\langfe16393\langnp9\insrsid1517842 \hich\af37\dbch\af31505\loch\f37 The filter() argument shall \hich\af37\dbch\af31505\loch\f37 
be stateless predicate to apply to each element to determine if it should be included.
\par {\pntext\pard\plain\ltrpar \rtlch\fcs1 \af37 \ltrch\fcs0 \f3\lang9\langfe16393\langnp9\insrsid1517842 \loch\af3\dbch\af31505\hich\f3 \'b7\tab}}\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\nowidctlpar\wrapdefault{\*\pn \pnlvlblt\ilvl0\ls2\pnrnot0\pnf3 
{\pntxtb \'b7}}\faauto\ls2\rin0\lin0\itap0\pararsid1517842 {\rtlch\fcs1 \af37\afs24 \ltrch\fcs0 \f37\fs24\lang9\langfe16393\langnp9\insrsid1517842 \hich\af37\dbch\af31505\loch\f37 
Predicate is a functional interface. So, we can also pass lambda expression also.
\par {\pntext\pard\plain\ltrpar \rtlch\fcs1 \af37 \ltrch\fcs0 \f3\lang9\langfe16393\langnp9\insrsid1517842 \loch\af3\dbch\af31505\hich\f3 \'b7\tab}}\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\nowidctlpar\wrapdefault{\*\pn \pnlvlblt\ilvl0\ls2\pnrnot0\pnf3 
{\pntxtb \'b7}}\faauto\ls2\rin0\lin0\itap0\pararsid1517842 {\rtlch\fcs1 \af37\afs24 \ltrch\fcs0 \f37\fs24\lang9\langfe16393\langnp9\insrsid1517842 \hich\af37\dbch\af31505\loch\f37 
It returns a new stream so we can use other operations applicable to any stream.
\par }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\nowidctlpar\wrapdefault{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\faauto\rin0\lin0\itap0\pararsid1517842 {\rtlch\fcs1 \ab\af37\afs32 \ltrch\fcs0 \b\f37\fs32\lang9\langfe16393\langnp9\insrsid1517842 
\hich\af37\dbch\af31505\loch\f37 2. Str\hich\af37\dbch\af31505\loch\f37 eam.filter() method syntax}{\rtlch\fcs1 \af37\afs24 \ltrch\fcs0 \f37\fs24\lang9\langfe16393\langnp9\insrsid1517842 
\par \hich\af37\dbch\af31505\loch\f37 Predicate is a functional interface and represents the condition to filter out the non-matching elements from the stream.}{\rtlch\fcs1 \ab\af37\afs24 \ltrch\fcs0 \b\f37\fs24\lang9\langfe16393\langnp9\insrsid1517842 
\par \hich\af37\dbch\af31505\loch\f37 Syntax}{\rtlch\fcs1 \af37\afs24 \ltrch\fcs0 \f37\fs24\lang9\langfe16393\langnp9\insrsid1517842 \hich\af37\dbch\af31505\loch\f37 : Stream<T> filter(Predicate<? super T> condition) 
\par 
\par }{\rtlch\fcs1 \ab\af37\afs32 \ltrch\fcs0 \b\f37\fs32\lang9\langfe16393\langnp9\insrsid1517842 \hich\af37\dbch\af31505\loch\f37 3. Java Stream filter() examples}{\rtlch\fcs1 \af37\afs24 \ltrch\fcs0 \f37\fs24\lang9\langfe16393\langnp9\insrsid1517842 
\par }{\rtlch\fcs1 \ab\af37\afs24 \ltrch\fcs0 \b\f37\fs24\lang9\langfe16393\langnp9\insrsid1517842 \hich\af37\dbch\af31505\loch\f37 3.1. Find all e\hich\af37\dbch\af31505\loch\f37 ven numbers \hich\f37 \endash \loch\f37  Lambda expression}{\rtlch\fcs1 
\af37\afs24 \ltrch\fcs0 \f37\fs24\lang9\langfe16393\langnp9\insrsid1517842 
\par \hich\af37\dbch\af31505\loch\f37 Java example to iterate over stream of integers and print only even numbers.
\par 
\par \hich\af37\dbch\af31505\loch\f37 import java.util.Arrays;
\par \hich\af37\dbch\af31505\loch\f37 import java.util.List; 
\par \hich\af37\dbch\af31505\loch\f37 public class Main
\par \{
\par \hich\af37\dbch\af31505\loch\f37     public static void main(String[] args)
\par \hich\af37\dbch\af31505\loch\f37     \{
\par \hich\af37\dbch\af31505\loch\f37         List<Integer> list =\hich\af37\dbch\af31505\loch\f37  Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
\par \hich\af37\dbch\af31505\loch\f37         list.stream()
\par \hich\af37\dbch\af31505\loch\f37             .filter(n -> n % 2 == 0)
\par \hich\af37\dbch\af31505\loch\f37             .forEach(System.out::println);
\par \hich\af37\dbch\af31505\loch\f37     \}
\par \}
\par \hich\af37\dbch\af31505\loch\f37 Program output.
\par \hich\af37\dbch\af31505\loch\f37 2
\par \hich\af37\dbch\af31505\loch\f37 4
\par \hich\af37\dbch\af31505\loch\f37 6
\par \hich\af37\dbch\af31505\loch\f37 8
\par \hich\af37\dbch\af31505\loch\f37 10
\par 
\par }{\rtlch\fcs1 \af37\afs24 \ltrch\fcs0 \f37\fs24\lang9\langfe16393\langnp9\insrsid1517842 
\par }{\rtlch\fcs1 \af37\afs24 \ltrch\fcs0 \f37\fs24\lang9\langfe16393\langnp9\insrsid1517842 
\par 
\par }{\rtlch\fcs1 \ab\af37\afs24 \ltrch\fcs0 \b\f37\fs24\lang9\langfe16393\langnp9\insrsid1517842 \hich\af37\dbch\af31505\loch\f37 3.2. Find all even numbers \hich\f37 \endash \loch\f37  Predicate class}{\rtlch\fcs1 \af37\afs24 \ltrch\fcs0 
\f37\fs24\lang9\langfe16393\langnp9\insrsid1517842 
\par \hich\af37\dbch\af31505\loch\f37 Java example to iterate over stream of integers and print only even numbers. This example uses Predicate class in place of lambda expression, though both are same things.
\par 
\par \hich\af37\dbch\af31505\loch\f37 import java.util.Arrays;
\par \hich\af37\dbch\af31505\loch\f37 import java.ut\hich\af37\dbch\af31505\loch\f37 il.List;
\par \hich\af37\dbch\af31505\loch\f37 import java.util.function.Predicate;
\par \hich\af37\dbch\af31505\loch\f37 public class Main
\par \{
\par \hich\af37\dbch\af31505\loch\f37     public static void main(String[] args)
\par \hich\af37\dbch\af31505\loch\f37     \{
\par \hich\af37\dbch\af31505\loch\f37         List<Integer> list = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);         
\par \hich\af37\dbch\af31505\loch\f37         Predicate<Integer> condition = new Predicate<Inte\hich\af37\dbch\af31505\loch\f37 ger>()
\par \hich\af37\dbch\af31505\loch\f37         \{
\par \hich\af37\dbch\af31505\loch\f37             @Override
\par \hich\af37\dbch\af31505\loch\f37             public boolean test(Integer n) \{
\par \hich\af37\dbch\af31505\loch\f37                 if (n % 2 == 0) \{
\par \hich\af37\dbch\af31505\loch\f37                     return true;
\par \hich\af37\dbch\af31505\loch\f37                 \}
\par \hich\af37\dbch\af31505\loch\f37                 return false;
\par \hich\af37\dbch\af31505\loch\f37             \}
\par \hich\af37\dbch\af31505\loch\f37         \};
\par \hich\af37\dbch\af31505\loch\f37         \hich\af37\dbch\af31505\loch\f37 list.stream().filter(condition).forEach(System.out::println);
\par \hich\af37\dbch\af31505\loch\f37     \}
\par \}
\par \hich\af37\dbch\af31505\loch\f37 Program output}{\rtlch\fcs1 \af37\afs24 \ltrch\fcs0 \f37\fs24\insrsid1517842 \hich\af37\dbch\af31505\loch\f37 :}{\rtlch\fcs1 \af37\afs24 \ltrch\fcs0 \f37\fs24\lang9\langfe16393\langnp9\insrsid1517842 
\par \hich\af37\dbch\af31505\loch\f37 2
\par \hich\af37\dbch\af31505\loch\f37 4
\par \hich\af37\dbch\af31505\loch\f37 6
\par \hich\af37\dbch\af31505\loch\f37 8
\par \hich\af37\dbch\af31505\loch\f37 10
\par 
\par 
\par }{\rtlch\fcs1 \ab\af37\afs24 \ltrch\fcs0 \b\f37\fs24\lang9\langfe16393\langnp9\insrsid1517842 \hich\af37\dbch\af31505\loch\f37 3.3. Filter even numbers and collect into new list
\par }{\rtlch\fcs1 \af37\afs24 \ltrch\fcs0 \f37\fs24\lang9\langfe16393\langnp9\insrsid1517842 \hich\af37\dbch\af31505\loch\f37 We can use the collect() method to collect the stream of even numbers and converts it into a list.
\par 
\par \hich\af37\dbch\af31505\loch\f37 import java.util.Arrays;
\par \hich\af37\dbch\af31505\loch\f37 import java.util.List;
\par \hich\af37\dbch\af31505\loch\f37 import java.util.stream.Collectors; 
\par \hich\af37\dbch\af31505\loch\f37 public class Main
\par \{
\par \hich\af37\dbch\af31505\loch\f37     public static void main(String[] args)
\par \hich\af37\dbch\af31505\loch\f37     \{
\par \hich\af37\dbch\af31505\loch\f37   \hich\af37\dbch\af31505\loch\f37       List<Integer> list = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
\par \hich\af37\dbch\af31505\loch\f37         List<Integer> evenNumbers = list.stream()
\par \hich\af37\dbch\af31505\loch\f37                     .filter(n -> n % 2 == 0)
\par \hich\af37\dbch\af31505\loch\f37                     .collect(Collectors.toList())}{\rtlch\fcs1 \af37\afs24 \ltrch\fcs0 \f37\fs24\insrsid1517842 \hich\af37\dbch\af31505\loch\f37 ;}{\rtlch\fcs1 \af37\afs24 \ltrch\fcs0 
\f37\fs24\lang9\langfe16393\langnp9\insrsid1517842 \hich\af37\dbch\af31505\loch\f37  
\par \hich\af37\dbch\af31505\loch\f37        System.out.println(evenNumber\hich\af37\dbch\af31505\loch\f37 s);
\par \hich\af37\dbch\af31505\loch\f37     \}
\par \}
\par \hich\af37\dbch\af31505\loch\f37 Program output}{\rtlch\fcs1 \af37\afs24 \ltrch\fcs0 \f37\fs24\insrsid1517842 \hich\af37\dbch\af31505\loch\f37 :}{\rtlch\fcs1 \af37\afs24 \ltrch\fcs0 \f37\fs24\lang9\langfe16393\langnp9\insrsid1517842 
\par \hich\af37\dbch\af31505\loch\f37 [2, 4, 6, 8, 10]
\par 
\par 
\par }{\rtlch\fcs1 \ab\af37\afs24 \ltrch\fcs0 \b\f37\fs24\lang9\langfe16393\langnp9\insrsid1517842 \hich\af37\dbch\af31505\loch\f37 3.4. Filter even numbers and get squares}{\rtlch\fcs1 \af37\afs24 \ltrch\fcs0 
\f37\fs24\lang9\langfe16393\langnp9\insrsid1517842 
\par \hich\af37\dbch\af31505\loch\f37 We can use the map() method to collect the stream of even numbers and then \hich\af37\dbch\af31505\loch\f37 convert each number to it\hich\f37 \rquote \loch\f37 s square before collecting it to a new list.
\par 
\par \hich\af37\dbch\af31505\loch\f37 import java.util.Arrays;
\par \hich\af37\dbch\af31505\loch\f37 import java.util.List;
\par \hich\af37\dbch\af31505\loch\f37 import java.util.stream.Collectors; 
\par \hich\af37\dbch\af31505\loch\f37 public class Main
\par \{
\par \hich\af37\dbch\af31505\loch\f37     public static void main(String[] args)
\par \hich\af37\dbch\af31505\loch\f37     \{
\par \hich\af37\dbch\af31505\loch\f37         List<Integer> list = A\hich\af37\dbch\af31505\loch\f37 rrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
\par \hich\af37\dbch\af31505\loch\f37         List<Integer> evenNumbers = list.stream()
\par \hich\af37\dbch\af31505\loch\f37                     .filter(n -> n % 2 == 0)
\par \hich\af37\dbch\af31505\loch\f37                     .map(n -> n * n)
\par \hich\af37\dbch\af31505\loch\f37                     .collect(Collectors.toList())}{\rtlch\fcs1 \af37\afs24 \ltrch\fcs0 \f37\fs24\insrsid1517842 \hich\af37\dbch\af31505\loch\f37 ;}{\rtlch\fcs1 \af37\afs24 \ltrch\fcs0 
\f37\fs24\lang9\langfe16393\langnp9\insrsid1517842 
\par \hich\af37\dbch\af31505\loch\f37         System.out.println(e\hich\af37\dbch\af31505\loch\f37 venNumbers);
\par \hich\af37\dbch\af31505\loch\f37     \}
\par \}
\par \hich\af37\dbch\af31505\loch\f37 Program output.
\par \hich\af37\dbch\af31505\loch\f37 [4, 16, 36, 64, 100]
\par }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\nowidctlpar\wrapdefault{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\insrsid1517842 
\par }{\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\insrsid1120764 
\par }\pard \ltrpar\qc \li0\ri0\sa200\sl276\slmult1\nowidctlpar\wrapdefault{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\faauto\rin0\lin0\itap0\pararsid1517842 {\rtlch\fcs1 \ab\af37\afs40 \ltrch\fcs0 \b\f37\fs40\lang9\langfe16393\langnp9\insrsid1517842 
\hich\af37\dbch\af31505\loch\f37 Java Stream map() example}{\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\lang9\langfe16393\langnp9\insrsid1517842 
\par }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\nowidctlpar\wrapdefault{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\faauto\rin0\lin0\itap0\pararsid1517842 {\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\lang9\langfe16393\langnp9\insrsid1517842 
\hich\af37\dbch\af31505\loch\f37 Stream map() is a method which produces one \hich\af37\dbch\af31505\loch\f37 
output value of a different type 'X' for each input value of type 'Y'.Stream.map() converts Stream<X> to Stream<Y>. For each X, a Y is created and put in new stream.
\par 
\par }{\rtlch\fcs1 \ab\af37\afs28 \ltrch\fcs0 \b\f37\fs28\lang9\langfe16393\langnp9\insrsid1517842 \hich\af37\dbch\af31505\loch\f37 1. Stream.map() method}{\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\lang9\langfe16393\langnp9\insrsid1517842 
\par {\pntext\pard\plain\ltrpar \rtlch\fcs1 \af37\afs22 \ltrch\fcs0 \f3\fs22\lang9\langfe16393\langnp9\insrsid1517842 \loch\af3\dbch\af31505\hich\f3 \'b7\tab}}\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\nowidctlpar\wrapdefault{\*\pn 
\pnlvlblt\ilvl0\ls2\pnrnot0\pnf3 {\pntxtb \'b7}}\faauto\ls2\rin0\lin0\itap0\pararsid1517842 {\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\lang9\langfe16393\langnp9\insrsid1517842 \hich\af37\dbch\af31505\loch\f37 
It is an intermediate operation and return another stream as metho\hich\af37\dbch\af31505\loch\f37 d output return value.
\par {\pntext\pard\plain\ltrpar \rtlch\fcs1 \af37\afs22 \ltrch\fcs0 \f3\fs22\lang9\langfe16393\langnp9\insrsid1517842 \loch\af3\dbch\af31505\hich\f3 \'b7\tab}}\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\nowidctlpar\wrapdefault{\*\pn 
\pnlvlblt\ilvl0\ls2\pnrnot0\pnf3 {\pntxtb \'b7}}\faauto\ls2\rin0\lin0\itap0\pararsid1517842 {\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\lang9\langfe16393\langnp9\insrsid1517842 \hich\af37\dbch\af31505\loch\f37 
Returns a stream consisting of the results of applying the given function to the elements of this stream.
\par {\pntext\pard\plain\ltrpar \rtlch\fcs1 \af37\afs22 \ltrch\fcs0 \f3\fs22\lang9\langfe16393\langnp9\insrsid1517842 \loch\af3\dbch\af31505\hich\f3 \'b7\tab}}\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\nowidctlpar\wrapdefault{\*\pn 
\pnlvlblt\ilvl0\ls2\pnrnot0\pnf3 {\pntxtb \'b7}}\faauto\ls2\rin0\lin0\itap0\pararsid1517842 {\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\lang9\langfe16393\langnp9\insrsid1517842 \hich\af37\dbch\af31505\loch\f37 
The map operation takes a Function, which is called for each value in the input stream and produces one result value, which is \hich\af37\dbch\af31505\loch\f37 sent to the output stream.
\par {\pntext\pard\plain\ltrpar \rtlch\fcs1 \af37\afs22 \ltrch\fcs0 \f3\fs22\lang9\langfe16393\langnp9\insrsid1517842 \loch\af3\dbch\af31505\hich\f3 \'b7\tab}}\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\nowidctlpar\wrapdefault{\*\pn 
\pnlvlblt\ilvl0\ls2\pnrnot0\pnf3 {\pntxtb \'b7}}\faauto\ls2\rin0\lin0\itap0\pararsid1517842 {\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\lang9\langfe16393\langnp9\insrsid1517842 \hich\af37\dbch\af31505\loch\f37 
The function used for transformation in map() is a stateless function and returns only a single value.
\par {\pntext\pard\plain\ltrpar \rtlch\fcs1 \af37\afs22 \ltrch\fcs0 \f3\fs22\lang9\langfe16393\langnp9\insrsid1517842 \loch\af3\dbch\af31505\hich\f3 \'b7\tab}}\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\nowidctlpar\wrapdefault{\*\pn 
\pnlvlblt\ilvl0\ls2\pnrnot0\pnf3 {\pntxtb \'b7}}\faauto\ls2\rin0\lin0\itap0\pararsid1517842 {\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\lang9\langfe16393\langnp9\insrsid1517842 \hich\af37\dbch\af31505\loch\f37 
map() method is used when we want to convert a stream of X to stream of Y.
\par {\pntext\pard\plain\ltrpar \rtlch\fcs1 \af37\afs22 \ltrch\fcs0 \f3\fs22\lang9\langfe16393\langnp9\insrsid1517842 \loch\af3\dbch\af31505\hich\f3 \'b7\tab}}\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\nowidctlpar\wrapdefault{\*\pn 
\pnlvlblt\ilvl0\ls2\pnrnot0\pnf3 {\pntxtb \'b7}}\faauto\ls2\rin0\lin0\itap0\pararsid1517842 {\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\lang9\langfe16393\langnp9\insrsid1517842 \hich\af37\dbch\af31505\loch\f37 Each mapped stream is closed after its contents hav
\hich\af37\dbch\af31505\loch\f37 e been placed into new output stream.
\par {\pntext\pard\plain\ltrpar \rtlch\fcs1 \af37\afs22 \ltrch\fcs0 \f3\fs22\lang9\langfe16393\langnp9\insrsid1517842 \loch\af3\dbch\af31505\hich\f3 \'b7\tab}}\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\nowidctlpar\wrapdefault{\*\pn 
\pnlvlblt\ilvl0\ls2\pnrnot0\pnf3 {\pntxtb \'b7}}\faauto\ls2\rin0\lin0\itap0\pararsid1517842 {\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\lang9\langfe16393\langnp9\insrsid1517842 \hich\af37\dbch\af31505\loch\f37 
map() operation does not flatten the stream as flatMap() operation does.
\par }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\nowidctlpar\wrapdefault{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\faauto\rin0\lin0\itap0\pararsid1517842 {\rtlch\fcs1 \ab\af37 \ltrch\fcs0 \b\f37\lang9\langfe16393\langnp9\insrsid1517842 
\par \hich\af37\dbch\af31505\loch\f37 1.2. Syntax
\par }{\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\lang9\langfe16393\langnp9\insrsid1517842 \hich\af37\dbch\af31505\loch\f37 Stream interface has three more similar methods which produce IntStream, LongStream and DoubleStream respectively after the map oper
\hich\af37\dbch\af31505\loch\f37 ation. If the streams created after map() operations are given return types then consider using these functions directly.
\par }\pard \ltrpar\ql \li720\ri0\sa200\sl276\slmult1\nowidctlpar\wrapdefault{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\faauto\rin0\lin720\itap0\pararsid1517842 {\rtlch\fcs1 \ai\af37 \ltrch\fcs0 \i\f37\lang9\langfe16393\langnp9\insrsid1517842 
\hich\af37\dbch\af31505\loch\f37 syntax: }{\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\lang9\langfe16393\langnp9\insrsid1517842 \hich\af37\dbch\af31505\loch\f37 <R> Stream<R> map(Function<? super T,? extends R> mapper)
\par }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\nowidctlpar\wrapdefault{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\faauto\rin0\lin0\itap0\pararsid1517842 {\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\lang9\langfe16393\langnp9\insrsid1517842 
\par }{\rtlch\fcs1 \ai\af37 \ltrch\fcs0 \i\f37\ul\lang9\langfe16393\langnp9\insrsid1517842 \hich\af37\dbch\af31505\loch\f37 Similar methods}{\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\lang9\langfe16393\langnp9\insrsid1517842 
\par \hich\af37\dbch\af31505\loch\f37 IntStream mapToInt(ToIntFunction<? super T> mapper)
\par \hich\af37\dbch\af31505\loch\f37 LongStream mapToLong(ToLongFunction<? super T> mapper)
\par \hich\af37\dbch\af31505\loch\f37 DoubleStream mapToDouble(ToDoubleFunction<? super T> mapper)
\par 
\par }{\rtlch\fcs1 \ab\af37\afs28 \ltrch\fcs0 \b\f37\fs28\lang9\langfe16393\langnp9\insrsid1517842 \hich\af37\dbch\af31505\loch\f37 2. Java Stream map() example
\par }{\rtlch\fcs1 \ab\af37 \ltrch\fcs0 \b\f37\lang9\langfe16393\langnp9\insrsid1517842 \hich\af37\dbch\af31505\loch\f37 2.1. Stream of strings to Stream of Integers}{\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\lang9\langfe16393\langnp9\insrsid1517842 
\par \hich\af37\dbch\af31505\loch\f37 
Java 8 example of Stream.map() function to convert a stream of strings to stream of integers. Here the function Integer::valueOf() takes one string from stream at a time, and convert the string to integer and put in another stream of integers, which is th
\hich\af37\dbch\af31505\loch\f37 e\hich\af37\dbch\af31505\loch\f37 n collected using Collectors.toList().
\par 
\par \hich\af37\dbch\af31505\loch\f37 import java.util.Arrays;
\par \hich\af37\dbch\af31505\loch\f37 import java.util.List;
\par \hich\af37\dbch\af31505\loch\f37 import java.util.stream.Collectors; 
\par \hich\af37\dbch\af31505\loch\f37 public class Main
\par \{
\par \hich\af37\dbch\af31505\loch\f37     public static void main(String[] args)
\par \hich\af37\dbch\af31505\loch\f37     \{
\par \hich\af37\dbch\af31505\loch\f37         List<String> listOfStrings = Arrays.asList("1", "2", "\hich\af37\dbch\af31505\loch\f37 3", "4", "5");
\par \hich\af37\dbch\af31505\loch\f37         List<Integer> listOfIntegers = listOfStrings.stream()
\par \hich\af37\dbch\af31505\loch\f37                                         .map(Integer::valueOf)
\par \hich\af37\dbch\af31505\loch\f37                                         .collect(Collectors.toList());
\par \hich\af37\dbch\af31505\loch\f37         System.out.println(listOfIntegers);
\par \hich\af37\dbch\af31505\loch\f37  \hich\af37\dbch\af31505\loch\f37    \}
\par \}
\par \hich\af37\dbch\af31505\loch\f37 Program output.
\par \hich\af37\dbch\af31505\loch\f37 [1, 2, 3, 4, 5]
\par 
\par 
\par }{\rtlch\fcs1 \ab\af37 \ltrch\fcs0 \b\f37\lang9\langfe16393\langnp9\insrsid1517842 \hich\af37\dbch\af31505\loch\f37 2.2. Stream of employees to stream of distinct salaries}{\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\lang9\langfe16393\langnp9\insrsid1517842 

\par \hich\af37\dbch\af31505\loch\f37 Java example to find all possible distinct salaries for a list of employees.
\par 
\par \hich\af37\dbch\af31505\loch\f37 import java.util.Arrays;
\par \hich\af37\dbch\af31505\loch\f37 import java.util.List;
\par \hich\af37\dbch\af31505\loch\f37 import java.util.stream.Collector\hich\af37\dbch\af31505\loch\f37 s;
\par \hich\af37\dbch\af31505\loch\f37 public class Main
\par \{
\par \hich\af37\dbch\af31505\loch\f37     public static void main(String[] args)
\par \hich\af37\dbch\af31505\loch\f37     \{
\par \hich\af37\dbch\af31505\loch\f37         List<Employee> employeesList = Arrays.asList(
\par \hich\af37\dbch\af31505\loch\f37                                             new Employee(1, "Alex", 100),
\par \hich\af37\dbch\af31505\loch\f37                                             new \hich\af37\dbch\af31505\loch\f37 Employee(2, "Brian", 100),
\par \hich\af37\dbch\af31505\loch\f37                                             new Employee(3, "Charles", 200),
\par \hich\af37\dbch\af31505\loch\f37                                             new Employee(4, "David", 200),
\par \hich\af37\dbch\af31505\loch\f37                                             new Employee(5, "Edward", 300),
\par \hich\af37\dbch\af31505\loch\f37  \hich\af37\dbch\af31505\loch\f37                                            new Employee(6, "Frank", 300)
\par \hich\af37\dbch\af31505\loch\f37                                         );
\par \hich\af37\dbch\af31505\loch\f37         List<Double> distinctSalaries = employeesList.stream()
\par \hich\af37\dbch\af31505\loch\f37                                 .map( e -> e.getSalary() )
\par \hich\af37\dbch\af31505\loch\f37                   \hich\af37\dbch\af31505\loch\f37               .distinct()
\par \hich\af37\dbch\af31505\loch\f37                                 .collect(Collectors.toList());
\par \hich\af37\dbch\af31505\loch\f37         System.out.println(distinctSalaries);
\par \hich\af37\dbch\af31505\loch\f37     \}
\par \}
\par \hich\af37\dbch\af31505\loch\f37 Program output.
\par \hich\af37\dbch\af31505\loch\f37 [100.0, 200.0, 300.0]
\par }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\nowidctlpar\wrapdefault{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\insrsid1120764 
\par 
\par }\pard \ltrpar\qc \li0\ri0\sa200\sl276\slmult1\nowidctlpar\wrapdefault{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\faauto\rin0\lin0\itap0\pararsid1517842 {\rtlch\fcs1 \ab\af37\afs40 \ltrch\fcs0 \b\f37\fs40\lang9\langfe16393\langnp9\insrsid1517842 
\hich\af37\dbch\af31505\loch\f37 Java Stream sorted() method}{\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\lang9\langfe16393\langnp9\insrsid1517842 
\par }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\nowidctlpar\wrapdefault{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\faauto\rin0\lin0\itap0\pararsid1517842 {\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\lang9\langfe16393\langnp9\insrsid1517842 
\hich\af37\dbch\af31505\loch\f37 Stream sorted() is a method to sort a stream o\hich\af37\dbch\af31505\loch\f37 f elements in their natural order and also according to the provided Comparator.
\par 
\par }{\rtlch\fcs1 \ab\af37\afs28 \ltrch\fcs0 \b\f37\fs28\lang9\langfe16393\langnp9\insrsid1517842 \hich\af37\dbch\af31505\loch\f37 1. Stream sort methods}{\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\lang9\langfe16393\langnp9\insrsid1517842 
\par \hich\af37\dbch\af31505\loch\f37 Stream interface provides two methods for sorting the stream elements.}{\rtlch\fcs1 \ab\af37 \ltrch\fcs0 \b\f37\lang9\langfe16393\langnp9\insrsid1517842 
\par \hich\af37\dbch\af31505\loch\f37 1.1. Stream.sorted()
\par }{\rtlch\fcs1 \ai\af37 \ltrch\fcs0 \i\f37\lang9\langfe16393\langnp9\insrsid1517842 \hich\af37\dbch\af31505\loch\f37 Syntax: }{\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\lang9\langfe16393\langnp9\insrsid1517842 \hich\af37\dbch\af31505\loch\f37 Stream<T> sorted()

\par {\pntext\pard\plain\ltrpar \rtlch\fcs1 \af37\afs22 \ltrch\fcs0 \f3\fs22\lang9\langfe16393\langnp9\insrsid1517842 \loch\af3\dbch\af31505\hich\f3 \'b7\tab}}\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\nowidctlpar\wrapdefault{\*\pn 
\pnlvlblt\ilvl0\ls2\pnrnot0\pnf3 {\pntxtb \'b7}}\faauto\ls2\rin0\lin0\itap0\pararsid1517842 {\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\lang9\langfe16393\langnp9\insrsid1517842 \hich\af37\dbch\af31505\loch\f37 
This is a stateful intermediate operation which returns a new stream.
\par {\pntext\pard\plain\ltrpar \rtlch\fcs1 \af37\afs22 \ltrch\fcs0 \f3\fs22\lang9\langfe16393\langnp9\insrsid1517842 \loch\af3\dbch\af31505\hich\f3 \'b7\tab}}\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\nowidctlpar\wrapdefault{\*\pn 
\pnlvlblt\ilvl0\ls2\pnrnot0\pnf3 {\pntxtb \'b7}}\faauto\ls2\rin0\lin0\itap0\pararsid1517842 {\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\lang9\langfe16393\langnp9\insrsid1517842 \hich\af37\dbch\af31505\loch\f37 
Returns a stream consisting of the elements of this stream, sorted according to natural order.
\par {\pntext\pard\plain\ltrpar \rtlch\fcs1 \af37\afs22 \ltrch\fcs0 \f3\fs22\lang9\langfe16393\langnp9\insrsid1517842 \loch\af3\dbch\af31505\hich\f3 \'b7\tab}}\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\nowidctlpar\wrapdefault{\*\pn 
\pnlvlblt\ilvl0\ls2\pnrnot0\pnf3 {\pntxtb \'b7}}\faauto\ls2\rin0\lin0\itap0\pararsid1517842 {\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\lang9\langfe16393\langnp9\insrsid1517842 \hich\af37\dbch\af31505\loch\f37 
If the elements of this stream are not Comparable, a java.lang.ClassCastException may be th\hich\af37\dbch\af31505\loch\f37 rown when the terminal operation is executed.
\par {\pntext\pard\plain\ltrpar \rtlch\fcs1 \af37\afs22 \ltrch\fcs0 \f3\fs22\lang9\langfe16393\langnp9\insrsid1517842 \loch\af3\dbch\af31505\hich\f3 \'b7\tab}}\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\nowidctlpar\wrapdefault{\*\pn 
\pnlvlblt\ilvl0\ls2\pnrnot0\pnf3 {\pntxtb \'b7}}\faauto\ls2\rin0\lin0\itap0\pararsid1517842 {\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\lang9\langfe16393\langnp9\insrsid1517842 \hich\af37\dbch\af31505\loch\f37 For ordered streams, the sort is stable.
\par {\pntext\pard\plain\ltrpar \rtlch\fcs1 \af37\afs22 \ltrch\fcs0 \f3\fs22\lang9\langfe16393\langnp9\insrsid1517842 \loch\af3\dbch\af31505\hich\f3 \'b7\tab}}\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\nowidctlpar\wrapdefault{\*\pn 
\pnlvlblt\ilvl0\ls2\pnrnot0\pnf3 {\pntxtb \'b7}}\faauto\ls2\rin0\lin0\itap0\pararsid1517842 {\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\lang9\langfe16393\langnp9\insrsid1517842 \hich\af37\dbch\af31505\loch\f37 
For unordered streams, no stability guarantees are made.
\par {\pntext\pard\plain\ltrpar \rtlch\fcs1 \af37\afs22 \ltrch\fcs0 \f3\fs22\lang9\langfe16393\langnp9\insrsid1517842 \loch\af3\dbch\af31505\hich\f3 \'b7\tab}}\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\nowidctlpar\wrapdefault{\*\pn 
\pnlvlblt\ilvl0\ls2\pnrnot0\pnf3 {\pntxtb \'b7}}\faauto\ls2\rin0\lin0\itap0\pararsid1517842 {\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\lang9\langfe16393\langnp9\insrsid1517842 \hich\af37\dbch\af31505\loch\f37 1.2. Stream.sorted(Comparator comparator)
\par {\pntext\pard\plain\ltrpar \rtlch\fcs1 \af37\afs22 \ltrch\fcs0 \f3\fs22\lang9\langfe16393\langnp9\insrsid1517842 \loch\af3\dbch\af31505\hich\f3 \'b7\tab}}\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\nowidctlpar\wrapdefault{\*\pn 
\pnlvlblt\ilvl0\ls2\pnrnot0\pnf3 {\pntxtb \'b7}}\faauto\ls2\rin0\lin0\itap0\pararsid1517842 {\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\lang9\langfe16393\langnp9\insrsid1517842 \hich\af37\dbch\af31505\loch\f37 Syntax
\par {\pntext\pard\plain\ltrpar \rtlch\fcs1 \af37\afs22 \ltrch\fcs0 \f3\fs22\lang9\langfe16393\langnp9\insrsid1517842 \loch\af3\dbch\af31505\hich\f3 \'b7\tab}}\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\nowidctlpar\wrapdefault{\*\pn 
\pnlvlblt\ilvl0\ls2\pnrnot0\pnf3 {\pntxtb \'b7}}\faauto\ls2\rin0\lin0\itap0\pararsid1517842 {\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\lang9\langfe16393\langnp9\insrsid1517842 \hich\af37\dbch\af31505\loch\f37 Stream<T> sorted(Comparator<? super T> comparator)

\par {\pntext\pard\plain\ltrpar \rtlch\fcs1 \af37\afs22 \ltrch\fcs0 \f3\fs22\lang9\langfe16393\langnp9\insrsid1517842 \loch\af3\dbch\af31505\hich\f3 \'b7\tab}}\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\nowidctlpar\wrapdefault{\*\pn 
\pnlvlblt\ilvl0\ls2\pnrnot0\pnf3 {\pntxtb \'b7}}\faauto\ls2\rin0\lin0\itap0\pararsid1517842 {\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\lang9\langfe16393\langnp9\insrsid1517842 \hich\af37\dbch\af31505\loch\f37 This is a st\hich\af37\dbch\af31505\loch\f37 
ateful intermediate operation which returns a new stream.
\par {\pntext\pard\plain\ltrpar \rtlch\fcs1 \af37\afs22 \ltrch\fcs0 \f3\fs22\lang9\langfe16393\langnp9\insrsid1517842 \loch\af3\dbch\af31505\hich\f3 \'b7\tab}}\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\nowidctlpar\wrapdefault{\*\pn 
\pnlvlblt\ilvl0\ls2\pnrnot0\pnf3 {\pntxtb \'b7}}\faauto\ls2\rin0\lin0\itap0\pararsid1517842 {\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\lang9\langfe16393\langnp9\insrsid1517842 \hich\af37\dbch\af31505\loch\f37 
Returns a stream consisting of the elements of this stream, sorted according to the provided Comparator..
\par {\pntext\pard\plain\ltrpar \rtlch\fcs1 \af37\afs22 \ltrch\fcs0 \f3\fs22\lang9\langfe16393\langnp9\insrsid1517842 \loch\af3\dbch\af31505\hich\f3 \'b7\tab}}\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\nowidctlpar\wrapdefault{\*\pn 
\pnlvlblt\ilvl0\ls2\pnrnot0\pnf3 {\pntxtb \'b7}}\faauto\ls2\rin0\lin0\itap0\pararsid1517842 {\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\lang9\langfe16393\langnp9\insrsid1517842 \hich\af37\dbch\af31505\loch\f37 For ordered streams, the sort is stable.
\par {\pntext\pard\plain\ltrpar \rtlch\fcs1 \af37\afs22 \ltrch\fcs0 \f3\fs22\lang9\langfe16393\langnp9\insrsid1517842 \loch\af3\dbch\af31505\hich\f3 \'b7\tab}}\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\nowidctlpar\wrapdefault{\*\pn 
\pnlvlblt\ilvl0\ls2\pnrnot0\pnf3 {\pntxtb \'b7}}\faauto\ls2\rin0\lin0\itap0\pararsid1517842 {\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\lang9\langfe16393\langnp9\insrsid1517842 \hich\af37\dbch\af31505\loch\f37 For unordered streams, no stability guarantees are 
\hich\af37\dbch\af31505\loch\f37 made.
\par }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\nowidctlpar\wrapdefault\faauto\rin0\lin0\itap0\pararsid1517842 {\rtlch\fcs1 \ab\af37\afs28 \ltrch\fcs0 \b\f37\fs28\lang9\langfe16393\langnp9\insrsid1517842 
\par 
\par \hich\af37\dbch\af31505\loch\f37 2. Java Stream sorted() examples}{\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\lang9\langfe16393\langnp9\insrsid1517842 
\par }{\rtlch\fcs1 \ab\af37 \ltrch\fcs0 \b\f37\lang9\langfe16393\langnp9\insrsid1517842 \hich\af37\dbch\af31505\loch\f37 2.1. Sort stream elements in natural order
\par }{\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\lang9\langfe16393\langnp9\insrsid1517842 \hich\af37\dbch\af31505\loch\f37 Java example to sort a stream of integers in natural order and print.
\par 
\par \hich\af37\dbch\af31505\loch\f37 import java.util.Arrays;
\par \hich\af37\dbch\af31505\loch\f37 import java.util.List;
\par \hich\af37\dbch\af31505\loch\f37 import java.util.stream.Collectors; 
\par \hich\af37\dbch\af31505\loch\f37 public class Mai\hich\af37\dbch\af31505\loch\f37 n
\par \{
\par \hich\af37\dbch\af31505\loch\f37     public static void main(String[] args)
\par \hich\af37\dbch\af31505\loch\f37     \{
\par \hich\af37\dbch\af31505\loch\f37         List<Integer> list = Arrays.asList(2, 4, 1, 3, 7, 5, 9, 6, 8);
\par \hich\af37\dbch\af31505\loch\f37         List<Integer> sortedList = list.stream()
\par \hich\af37\dbch\af31505\loch\f37                                     .sorted()
\par \hich\af37\dbch\af31505\loch\f37                                     \hich\af37\dbch\af31505\loch\f37 .collect(Collectors.toList());
\par \hich\af37\dbch\af31505\loch\f37         System.out.println(sortedList);
\par \hich\af37\dbch\af31505\loch\f37     \}
\par \}
\par \hich\af37\dbch\af31505\loch\f37 Program output.
\par \hich\af37\dbch\af31505\loch\f37 [1, 2, 3, 4, 5, 6, 7, 8, 9]
\par 
\par }{\rtlch\fcs1 \ab\af37 \ltrch\fcs0 \b\f37\lang9\langfe16393\langnp9\insrsid1517842 \hich\af37\dbch\af31505\loch\f37 2.2. Sort stream elements using comparator}{\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\lang9\langfe16393\langnp9\insrsid1517842 
\par \hich\af37\dbch\af31505\loch\f37 Java example to sort a stream of integers in reverse order using a comparator.
\par 
\par \hich\af37\dbch\af31505\loch\f37 import ja\hich\af37\dbch\af31505\loch\f37 va.util.Arrays;
\par \hich\af37\dbch\af31505\loch\f37 import java.util.List;
\par \hich\af37\dbch\af31505\loch\f37 import java.util.stream.Collectors;
\par \hich\af37\dbch\af31505\loch\f37 public class Main
\par \{
\par \hich\af37\dbch\af31505\loch\f37     public static void main(String[] args)
\par \hich\af37\dbch\af31505\loch\f37     \{
\par \hich\af37\dbch\af31505\loch\f37         List<Integer> list = Arrays.asList(2, 4, 1, 3, 7, 5, 9, 6, 8);
\par \hich\af37\dbch\af31505\loch\f37         List<Integer> sortedList = list.s\hich\af37\dbch\af31505\loch\f37 tream()
\par \hich\af37\dbch\af31505\loch\f37                                     .sorted(Comparator.reverseOrder())
\par \hich\af37\dbch\af31505\loch\f37                                     .collect(Collectors.toList());
\par \hich\af37\dbch\af31505\loch\f37         System.out.println(sortedList);
\par \hich\af37\dbch\af31505\loch\f37     \}
\par \}
\par \hich\af37\dbch\af31505\loch\f37 Program output.
\par \hich\af37\dbch\af31505\loch\f37 [9, 8, 7, 6, 5, 4, 3, 2, 1]
\par 
\par }{\rtlch\fcs1 \ab\af37 \ltrch\fcs0 \b\f37\lang9\langfe16393\langnp9\insrsid1517842 \hich\af37\dbch\af31505\loch\f37 2.3. Sort stream elements using custom comparator}{\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\lang9\langfe16393\langnp9\insrsid1517842 
\par \hich\af37\dbch\af31505\loch\f37 Java example to sort a stream of integers in reverse order using a custom comparator.
\par 
\par \hich\af37\dbch\af31505\loch\f37 import java.util.Arrays;
\par \hich\af37\dbch\af31505\loch\f37 import java.util.Comparator;
\par \hich\af37\dbch\af31505\loch\f37 import java.util.List;
\par \hich\af37\dbch\af31505\loch\f37 import java.u\hich\af37\dbch\af31505\loch\f37 til.stream.Collectors;
\par \hich\af37\dbch\af31505\loch\f37 public class Main
\par \{
\par \hich\af37\dbch\af31505\loch\f37     public static void main(String[] args)
\par \hich\af37\dbch\af31505\loch\f37     \{
\par \hich\af37\dbch\af31505\loch\f37         List<Integer> list = Arrays.asList(2, 4, 1, 3, 7, 5, 9, 6, 8);
\par \hich\af37\dbch\af31505\loch\f37         Comparator<Integer> reverseComparator = new Comparator<Integer>() \{
\par \hich\af37\dbch\af31505\loch\f37             @Over\hich\af37\dbch\af31505\loch\f37 ride
\par \hich\af37\dbch\af31505\loch\f37             public int compare(Integer i1, Integer i2) \{
\par \hich\af37\dbch\af31505\loch\f37                 return i2.compareTo(i1);
\par \hich\af37\dbch\af31505\loch\f37             \}
\par \hich\af37\dbch\af31505\loch\f37         \};
\par \hich\af37\dbch\af31505\loch\f37         List<Integer> sortedList = list.stream()
\par \hich\af37\dbch\af31505\loch\f37                     .sorted(reverseComparator)
\par \hich\af37\dbch\af31505\loch\f37                     .collect(Col\hich\af37\dbch\af31505\loch\f37 lectors.toList());
\par \hich\af37\dbch\af31505\loch\f37         System.out.println(sortedList);
\par \hich\af37\dbch\af31505\loch\f37     \}
\par \}
\par \hich\af37\dbch\af31505\loch\f37 Program output.
\par \hich\af37\dbch\af31505\loch\f37 [9, 8, 7, 6, 5, 4, 3, 2, 1]
\par 
\par }{\rtlch\fcs1 \ab\af37 \ltrch\fcs0 \b\f37\lang9\langfe16393\langnp9\insrsid1517842 \hich\af37\dbch\af31505\loch\f37 2.4. Sort stream elements using lambda expression
\par }{\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\lang9\langfe16393\langnp9\insrsid1517842 \hich\af37\dbch\af31505\loch\f37 Java example to sort a stream of integers in \hich\af37\dbch\af31505\loch\f37 
reverse order using lambda expression to specify the comparison logic.
\par 
\par \hich\af37\dbch\af31505\loch\f37 import java.util.Arrays;
\par \hich\af37\dbch\af31505\loch\f37 import java.util.List;
\par \hich\af37\dbch\af31505\loch\f37 import java.util.stream.Collectors;
\par \hich\af37\dbch\af31505\loch\f37 public class Main
\par \{
\par \hich\af37\dbch\af31505\loch\f37     public static void main(String[] args)
\par \hich\af37\dbch\af31505\loch\f37     \{
\par \hich\af37\dbch\af31505\loch\f37         List<Integer> list = Ar\hich\af37\dbch\af31505\loch\f37 rays.asList(2, 4, 1, 3, 7, 5, 9, 6, 8);
\par \hich\af37\dbch\af31505\loch\f37         List<Integer> sortedList = list.stream()
\par \hich\af37\dbch\af31505\loch\f37                     .sorted( (i1, i2) -> i2.compareTo(i1) )
\par \hich\af37\dbch\af31505\loch\f37                     .collect(Collectors.toList());
\par \hich\af37\dbch\af31505\loch\f37         System.out.println(sortedList);
\par \hich\af37\dbch\af31505\loch\f37     \}
\par \}
\par \hich\af37\dbch\af31505\loch\f37 Program \hich\af37\dbch\af31505\loch\f37 output.
\par \hich\af37\dbch\af31505\loch\f37 [9, 8, 7, 6, 5, 4, 3, 2, 1]
\par }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\nowidctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\insrsid1120764 
\par }{\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\insrsid1517842 \hich\af37\dbch\af31505\loch\f37 ******************\hich\af37\dbch\af31505\loch\f37 ***********************************************************
\par }{\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\insrsid1120764 
\par 
\par 
\par 
\par 
\par }{\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\lang9\langfe16393\langnp9\insrsid1120764 
\par 
\par }{\rtlch\fcs1 \af37 \ltrch\fcs0 \f37\lang9\langfe16393\langnp9\insrsid1120764 
\par }{\*\themedata 504b030414000600080000002100e9de0fbfff0000001c020000130000005b436f6e74656e745f54797065735d2e786d6cac91cb4ec3301045f748fc83e52d4a
9cb2400825e982c78ec7a27cc0c8992416c9d8b2a755fbf74cd25442a820166c2cd933f79e3be372bd1f07b5c3989ca74aaff2422b24eb1b475da5df374fd9ad
5689811a183c61a50f98f4babebc2837878049899a52a57be670674cb23d8e90721f90a4d2fa3802cb35762680fd800ecd7551dc18eb899138e3c943d7e503b6
b01d583deee5f99824e290b4ba3f364eac4a430883b3c092d4eca8f946c916422ecab927f52ea42b89a1cd59c254f919b0e85e6535d135a8de20f20b8c12c3b0
0c895fcf6720192de6bf3b9e89ecdbd6596cbcdd8eb28e7c365ecc4ec1ff1460f53fe813d3cc7f5b7f020000ffff0300504b030414000600080000002100a5d6
a7e7c0000000360100000b0000005f72656c732f2e72656c73848fcf6ac3300c87ef85bd83d17d51d2c31825762fa590432fa37d00e1287f68221bdb1bebdb4f
c7060abb0884a4eff7a93dfeae8bf9e194e720169aaa06c3e2433fcb68e1763dbf7f82c985a4a725085b787086a37bdbb55fbc50d1a33ccd311ba548b6309512
0f88d94fbc52ae4264d1c910d24a45db3462247fa791715fd71f989e19e0364cd3f51652d73760ae8fa8c9ffb3c330cc9e4fc17faf2ce545046e37944c69e462
a1a82fe353bd90a865aad41ed0b5b8f9d6fd010000ffff0300504b0304140006000800000021006b799616830000008a0000001c0000007468656d652f746865
6d652f7468656d654d616e616765722e786d6c0ccc4d0ac3201040e17da17790d93763bb284562b2cbaebbf600439c1a41c7a0d29fdbd7e5e38337cedf14d59b
4b0d592c9c070d8a65cd2e88b7f07c2ca71ba8da481cc52c6ce1c715e6e97818c9b48d13df49c873517d23d59085adb5dd20d6b52bd521ef2cdd5eb9246a3d8b
4757e8d3f729e245eb2b260a0238fd010000ffff0300504b030414000600080000002100b6f4679893070000c9200000160000007468656d652f7468656d652f
7468656d65312e786d6cec59cd8b1bc915bf07f23f347d97f5d5ad8fc1f2a24fcfda33b6b164873dd648a5eef2547789aad28cc56208de532e81c026e49085bd
ed21842cecc22eb9e48f31d8249b3f22afaa5bdd5552c99e191c3061463074977eefd5afde7bf5de53d5ddcf5e26d4bbc05c1096f6fcfa9d9aefe174ce16248d
7afeb3d9a4d2f13d2151ba4094a5b8e76fb0f03fbbf7eb5fdd454732c609f6403e1547a8e7c752ae8eaa5531876124eeb0154ee1bb25e30992f0caa3ea82a34b
d09bd06aa3566b55134452df4b51026a1f2f97648ebd9952e9dfdb2a1f53784da5500373caa74a35b6243476715e5708b11143cabd0b447b3eccb3609733fc52
fa1e4542c2173dbfa6fffceabdbb5574940b517940d6909be8bf5c2e17589c37f49c3c3a2b260d823068f50bfd1a40e53e6edc1eb7c6ad429f06a0f91c569a71
b175b61bc320c71aa0ecd1a17bd41e35eb16ded0dfdce3dc0fd5c7c26b50a63fd8c34f2643b0a285d7a00c1feee1c3417730b2f56b50866fede1dbb5fe28685b
fa3528a6243ddf43d7c25673b85d6d0159327aec8477c360d26ee4ca4b144443115d6a8a254be5a1584bd00bc6270050408a24493db959e1259a43140f112567
9c7827248a21f056286502866b8ddaa4d684ffea13e827ed5174849121ad780113b137a4f87862cec94af6fc07a0d537206f7ffef9cdeb1fdfbcfee9cd575fbd
79fdf77c6eadca923b466964cafdf2dd1ffef3cd6fbd7ffff0ed2f5fff319b7a172f4cfcbbbffdeedd3ffef93ef5b0e2d2146ffff4fdbb1fbf7ffbe7dfffebaf
5f3bb4f7393a33e1339260e13dc297de5396c0021dfcf119bf9ec42c46c494e8a791402952b338f48f656ca11f6d10450edc00db767cce21d5b880f7d72f2cc2
d398af2571687c182716f094313a60dc6985876a2ec3ccb3751ab927e76b13f714a10bd7dc43945a5e1eaf579063894be530c616cd2714a5124538c5d253dfb1
738c1dabfb8210cbaea764ce99604be97d41bc01224e93ccc899154da5d03149c02f1b1741f0b7659bd3e7de8051d7aa47f8c246c2de40d4417e86a965c6fb68
2d51e252394309350d7e8264ec2239ddf0b9891b0b099e8e3065de78818570c93ce6b05ec3e90f21cdb8dd7e4a37898de4929cbb749e20c64ce4889d0f6394ac
5cd829496313fbb938871045de13265df05366ef10f50e7e40e941773f27d872f787b3c133c8b026a53240d4376beef0e57dccacf89d6ee8126157aae9f3c44a
b17d4e9cd131584756689f604cd1255a60ec3dfbdcc160c05696cd4bd20f62c82ac7d815580f901dabea3dc5027a25d5dcece7c91322ac909de2881de073bad9
493c1b9426881fd2fc08bc6eda7c0ca52e7105c0633a3f37818f08f480102f4ea33c16a0c308ee835a9fc4c82a60ea5db8e375c32dff5d658fc1be7c61d1b8c2
be04197c6d1948eca6cc7b6d3343d49aa00c9819822ec3956e41c4727f29a28aab165b3be596f6a62ddd00dd91d5f42424fd6007b4d3fb84ffbbde073a8cb77f
f9c6b10f3e4ebfe3566c25ab6b763a8792c9f14e7f7308b7dbd50c195f904fbfa919a175fa04431dd9cf58b73dcd6d4fe3ffdff73487f6f36d2773a8dfb8ed64
7ce8306e3b99fc70e5e3743265f3027d8d3af0c80e7af4b14f72f0d46749289dca0dc527421ffc08f83db398c0a092d3279eb838055cc5f0a8ca1c4c60e1228e
b48cc799fc0d91f134462b381daafb4a492472d591f0564cc0a1911e76ea5678ba4e4ed9223becacd7d5c16656590592e5782d2cc6e1a04a66e856bb3cc02bd4
6bb6913e68dd1250b2d721614c6693683a48b4b783ca48fa58178ce620a157f65158741d2c3a4afdd6557b2c805ae115f8c1edc1cff49e1f06200242701e07cd
f942f92973f5d6bbda991fd3d3878c69450034d8db08283ddd555c0f2e4fad2e0bb52b78da2261849b4d425b46377822869fc17974aad1abd0b8aeafbba54b2d
7aca147a3e08ad9246bbf33e1637f535c8ede6069a9a9982a6de65cf6f35430899395af5fc251c1ac363b282d811ea3717a211dcbccc25cf36fc4d32cb8a0b39
4222ce0cae934e960d122231f728497abe5a7ee1069aea1ca2b9d51b90103e59725d482b9f1a3970baed64bc5ce2b934dd6e8c284b67af90e1b35ce1fc568bdf
1cac24d91adc3d8d1797de195df3a708422c6cd795011744c0dd413db3e682c0655891c8caf8db294c79da356fa3740c65e388ae62945714339967709dca0b3a
faadb081f196af190c6a98242f8467912ab0a651ad6a5a548d8cc3c1aafb6121653923699635d3ca2aaa6abab39835c3b60cecd8f26645de60b53531e434b3c2
67a97b37e576b7b96ea74f28aa0418bcb09fa3ea5ea12018d4cac92c6a8af17e1a56393b1fb56bc776811fa07695226164fdd656ed8edd8a1ae19c0e066f54f9
416e376a6168b9ed2bb5a5f5adb979b1cdce5e40f2184197bba6526857c2c92e47d0104d754f92a50dd8222f65be35e0c95b73d2f3bfac85fd60d80887955a27
1c57826650ab74c27eb3d20fc3667d1cd66ba341e31514161927f530bbb19fc00506dde4f7f67a7cefee3ed9ded1dc99b3a4caf4dd7c5513d777f7f5c6e1bb7b
8f40d2f9b2d598749bdd41abd26df627956034e854bac3d6a0326a0ddba3c9681876ba9357be77a1c141bf390c5ae34ea5551f0e2b41aba6e877ba9576d068f4
8376bf330efaaff23606569ea58fdc16605ecdebde7f010000ffff0300504b0304140006000800000021000dd1909fb60000001b010000270000007468656d65
2f7468656d652f5f72656c732f7468656d654d616e616765722e786d6c2e72656c73848f4d0ac2301484f78277086f6fd3ba109126dd88d0add40384e4350d36
3f2451eced0dae2c082e8761be9969bb979dc9136332de3168aa1a083ae995719ac16db8ec8e4052164e89d93b64b060828e6f37ed1567914b284d262452282e
3198720e274a939cd08a54f980ae38a38f56e422a3a641c8bbd048f7757da0f19b017cc524bd62107bd5001996509affb3fd381a89672f1f165dfe514173d985
0528a2c6cce0239baa4c04ca5bbabac4df000000ffff0300504b01022d0014000600080000002100e9de0fbfff0000001c020000130000000000000000000000
0000000000005b436f6e74656e745f54797065735d2e786d6c504b01022d0014000600080000002100a5d6a7e7c0000000360100000b00000000000000000000
000000300100005f72656c732f2e72656c73504b01022d00140006000800000021006b799616830000008a0000001c0000000000000000000000000019020000
7468656d652f7468656d652f7468656d654d616e616765722e786d6c504b01022d0014000600080000002100b6f4679893070000c92000001600000000000000
000000000000d60200007468656d652f7468656d652f7468656d65312e786d6c504b01022d00140006000800000021000dd1909fb60000001b01000027000000
000000000000000000009d0a00007468656d652f7468656d652f5f72656c732f7468656d654d616e616765722e786d6c2e72656c73504b050600000000050005005d010000980b00000000}
{\*\colorschememapping 3c3f786d6c2076657273696f6e3d22312e302220656e636f64696e673d225554462d3822207374616e64616c6f6e653d22796573223f3e0d0a3c613a636c724d
617020786d6c6e733a613d22687474703a2f2f736368656d61732e6f70656e786d6c666f726d6174732e6f72672f64726177696e676d6c2f323030362f6d6169
6e22206267313d226c743122207478313d22646b3122206267323d226c743222207478323d22646b322220616363656e74313d22616363656e74312220616363
656e74323d22616363656e74322220616363656e74333d22616363656e74332220616363656e74343d22616363656e74342220616363656e74353d22616363656e74352220616363656e74363d22616363656e74362220686c696e6b3d22686c696e6b2220666f6c486c696e6b3d22666f6c486c696e6b222f3e}
{\*\latentstyles\lsdstimax375\lsdlockeddef0\lsdsemihiddendef0\lsdunhideuseddef0\lsdqformatdef0\lsdprioritydef99{\lsdlockedexcept \lsdqformat1 \lsdpriority0 \lsdlocked0 Normal;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 1;
\lsdsemihidden1 \lsdunhideused1 \lsdqformat1 \lsdpriority9 \lsdlocked0 heading 2;\lsdsemihidden1 \lsdunhideused1 \lsdqformat1 \lsdpriority9 \lsdlocked0 heading 3;\lsdsemihidden1 \lsdunhideused1 \lsdqformat1 \lsdpriority9 \lsdlocked0 heading 4;
\lsdsemihidden1 \lsdunhideused1 \lsdqformat1 \lsdpriority9 \lsdlocked0 heading 5;\lsdsemihidden1 \lsdunhideused1 \lsdqformat1 \lsdpriority9 \lsdlocked0 heading 6;\lsdsemihidden1 \lsdunhideused1 \lsdqformat1 \lsdpriority9 \lsdlocked0 heading 7;
\lsdsemihidden1 \lsdunhideused1 \lsdqformat1 \lsdpriority9 \lsdlocked0 heading 8;\lsdsemihidden1 \lsdunhideused1 \lsdqformat1 \lsdpriority9 \lsdlocked0 heading 9;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 index 1;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 index 2;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 index 3;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 index 4;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 index 5;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 index 6;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 index 7;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 index 8;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 index 9;
\lsdsemihidden1 \lsdunhideused1 \lsdpriority39 \lsdlocked0 toc 1;\lsdsemihidden1 \lsdunhideused1 \lsdpriority39 \lsdlocked0 toc 2;\lsdsemihidden1 \lsdunhideused1 \lsdpriority39 \lsdlocked0 toc 3;
\lsdsemihidden1 \lsdunhideused1 \lsdpriority39 \lsdlocked0 toc 4;\lsdsemihidden1 \lsdunhideused1 \lsdpriority39 \lsdlocked0 toc 5;\lsdsemihidden1 \lsdunhideused1 \lsdpriority39 \lsdlocked0 toc 6;
\lsdsemihidden1 \lsdunhideused1 \lsdpriority39 \lsdlocked0 toc 7;\lsdsemihidden1 \lsdunhideused1 \lsdpriority39 \lsdlocked0 toc 8;\lsdsemihidden1 \lsdunhideused1 \lsdpriority39 \lsdlocked0 toc 9;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Normal Indent;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 footnote text;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 annotation text;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 header;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 footer;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 index heading;\lsdsemihidden1 \lsdunhideused1 \lsdqformat1 \lsdpriority35 \lsdlocked0 caption;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 table of figures;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 envelope address;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 envelope return;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 footnote reference;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 annotation reference;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 line number;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 page number;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 endnote reference;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 endnote text;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 table of authorities;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 macro;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 toa heading;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Bullet;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Number;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List 2;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List 3;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List 4;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List 5;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Bullet 2;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Bullet 3;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Bullet 4;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Bullet 5;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Number 2;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Number 3;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Number 4;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Number 5;\lsdqformat1 \lsdpriority10 \lsdlocked0 Title;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Closing;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Signature;\lsdsemihidden1 \lsdunhideused1 \lsdpriority1 \lsdlocked0 Default Paragraph Font;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Body Text;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Body Text Indent;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Continue;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Continue 2;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Continue 3;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Continue 4;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Continue 5;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Message Header;\lsdqformat1 \lsdpriority11 \lsdlocked0 Subtitle;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Salutation;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Date;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Body Text First Indent;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Body Text First Indent 2;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Note Heading;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Body Text 2;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Body Text 3;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Body Text Indent 2;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Body Text Indent 3;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Block Text;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Hyperlink;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 FollowedHyperlink;\lsdqformat1 \lsdpriority22 \lsdlocked0 Strong;
\lsdqformat1 \lsdpriority20 \lsdlocked0 Emphasis;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Document Map;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Plain Text;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 E-mail Signature;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 HTML Top of Form;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 HTML Bottom of Form;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Normal (Web);\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 HTML Acronym;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 HTML Address;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 HTML Cite;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 HTML Code;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 HTML Definition;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 HTML Keyboard;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 HTML Preformatted;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 HTML Sample;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 HTML Typewriter;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 HTML Variable;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Normal Table;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 annotation subject;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 No List;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Outline List 1;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Outline List 2;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Outline List 3;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Simple 1;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Simple 2;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Simple 3;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Classic 1;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Classic 2;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Classic 3;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Classic 4;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Colorful 1;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Colorful 2;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Colorful 3;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Columns 1;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Columns 2;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Columns 3;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Columns 4;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Columns 5;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Grid 1;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Grid 2;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Grid 3;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Grid 4;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Grid 5;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Grid 6;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Grid 7;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Grid 8;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table List 1;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table List 2;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table List 3;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table List 4;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table List 5;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table List 6;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table List 7;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table List 8;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table 3D effects 1;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table 3D effects 2;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table 3D effects 3;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Contemporary;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Elegant;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Professional;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Subtle 1;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Subtle 2;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Web 1;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Web 2;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Web 3;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Balloon Text;\lsdpriority39 \lsdlocked0 Table Grid;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Theme;\lsdsemihidden1 \lsdlocked0 Placeholder Text;
\lsdqformat1 \lsdpriority1 \lsdlocked0 No Spacing;\lsdpriority60 \lsdlocked0 Light Shading;\lsdpriority61 \lsdlocked0 Light List;\lsdpriority62 \lsdlocked0 Light Grid;\lsdpriority63 \lsdlocked0 Medium Shading 1;\lsdpriority64 \lsdlocked0 Medium Shading 2;
\lsdpriority65 \lsdlocked0 Medium List 1;\lsdpriority66 \lsdlocked0 Medium List 2;\lsdpriority67 \lsdlocked0 Medium Grid 1;\lsdpriority68 \lsdlocked0 Medium Grid 2;\lsdpriority69 \lsdlocked0 Medium Grid 3;\lsdpriority70 \lsdlocked0 Dark List;
\lsdpriority71 \lsdlocked0 Colorful Shading;\lsdpriority72 \lsdlocked0 Colorful List;\lsdpriority73 \lsdlocked0 Colorful Grid;\lsdpriority60 \lsdlocked0 Light Shading Accent 1;\lsdpriority61 \lsdlocked0 Light List Accent 1;
\lsdpriority62 \lsdlocked0 Light Grid Accent 1;\lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 1;\lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 1;\lsdpriority65 \lsdlocked0 Medium List 1 Accent 1;\lsdsemihidden1 \lsdlocked0 Revision;
\lsdqformat1 \lsdpriority34 \lsdlocked0 List Paragraph;\lsdqformat1 \lsdpriority29 \lsdlocked0 Quote;\lsdqformat1 \lsdpriority30 \lsdlocked0 Intense Quote;\lsdpriority66 \lsdlocked0 Medium List 2 Accent 1;\lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 1;
\lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 1;\lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 1;\lsdpriority70 \lsdlocked0 Dark List Accent 1;\lsdpriority71 \lsdlocked0 Colorful Shading Accent 1;\lsdpriority72 \lsdlocked0 Colorful List Accent 1;
\lsdpriority73 \lsdlocked0 Colorful Grid Accent 1;\lsdpriority60 \lsdlocked0 Light Shading Accent 2;\lsdpriority61 \lsdlocked0 Light List Accent 2;\lsdpriority62 \lsdlocked0 Light Grid Accent 2;\lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 2;
\lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 2;\lsdpriority65 \lsdlocked0 Medium List 1 Accent 2;\lsdpriority66 \lsdlocked0 Medium List 2 Accent 2;\lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 2;\lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 2;
\lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 2;\lsdpriority70 \lsdlocked0 Dark List Accent 2;\lsdpriority71 \lsdlocked0 Colorful Shading Accent 2;\lsdpriority72 \lsdlocked0 Colorful List Accent 2;\lsdpriority73 \lsdlocked0 Colorful Grid Accent 2;
\lsdpriority60 \lsdlocked0 Light Shading Accent 3;\lsdpriority61 \lsdlocked0 Light List Accent 3;\lsdpriority62 \lsdlocked0 Light Grid Accent 3;\lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 3;\lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 3;
\lsdpriority65 \lsdlocked0 Medium List 1 Accent 3;\lsdpriority66 \lsdlocked0 Medium List 2 Accent 3;\lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 3;\lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 3;\lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 3;
\lsdpriority70 \lsdlocked0 Dark List Accent 3;\lsdpriority71 \lsdlocked0 Colorful Shading Accent 3;\lsdpriority72 \lsdlocked0 Colorful List Accent 3;\lsdpriority73 \lsdlocked0 Colorful Grid Accent 3;\lsdpriority60 \lsdlocked0 Light Shading Accent 4;
\lsdpriority61 \lsdlocked0 Light List Accent 4;\lsdpriority62 \lsdlocked0 Light Grid Accent 4;\lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 4;\lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 4;\lsdpriority65 \lsdlocked0 Medium List 1 Accent 4;
\lsdpriority66 \lsdlocked0 Medium List 2 Accent 4;\lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 4;\lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 4;\lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 4;\lsdpriority70 \lsdlocked0 Dark List Accent 4;
\lsdpriority71 \lsdlocked0 Colorful Shading Accent 4;\lsdpriority72 \lsdlocked0 Colorful List Accent 4;\lsdpriority73 \lsdlocked0 Colorful Grid Accent 4;\lsdpriority60 \lsdlocked0 Light Shading Accent 5;\lsdpriority61 \lsdlocked0 Light List Accent 5;
\lsdpriority62 \lsdlocked0 Light Grid Accent 5;\lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 5;\lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 5;\lsdpriority65 \lsdlocked0 Medium List 1 Accent 5;\lsdpriority66 \lsdlocked0 Medium List 2 Accent 5;
\lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 5;\lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 5;\lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 5;\lsdpriority70 \lsdlocked0 Dark List Accent 5;\lsdpriority71 \lsdlocked0 Colorful Shading Accent 5;
\lsdpriority72 \lsdlocked0 Colorful List Accent 5;\lsdpriority73 \lsdlocked0 Colorful Grid Accent 5;\lsdpriority60 \lsdlocked0 Light Shading Accent 6;\lsdpriority61 \lsdlocked0 Light List Accent 6;\lsdpriority62 \lsdlocked0 Light Grid Accent 6;
\lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 6;\lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 6;\lsdpriority65 \lsdlocked0 Medium List 1 Accent 6;\lsdpriority66 \lsdlocked0 Medium List 2 Accent 6;
\lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 6;\lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 6;\lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 6;\lsdpriority70 \lsdlocked0 Dark List Accent 6;\lsdpriority71 \lsdlocked0 Colorful Shading Accent 6;
\lsdpriority72 \lsdlocked0 Colorful List Accent 6;\lsdpriority73 \lsdlocked0 Colorful Grid Accent 6;\lsdqformat1 \lsdpriority19 \lsdlocked0 Subtle Emphasis;\lsdqformat1 \lsdpriority21 \lsdlocked0 Intense Emphasis;
\lsdqformat1 \lsdpriority31 \lsdlocked0 Subtle Reference;\lsdqformat1 \lsdpriority32 \lsdlocked0 Intense Reference;\lsdqformat1 \lsdpriority33 \lsdlocked0 Book Title;\lsdsemihidden1 \lsdunhideused1 \lsdpriority37 \lsdlocked0 Bibliography;
\lsdsemihidden1 \lsdunhideused1 \lsdqformat1 \lsdpriority39 \lsdlocked0 TOC Heading;\lsdpriority41 \lsdlocked0 Plain Table 1;\lsdpriority42 \lsdlocked0 Plain Table 2;\lsdpriority43 \lsdlocked0 Plain Table 3;\lsdpriority44 \lsdlocked0 Plain Table 4;
\lsdpriority45 \lsdlocked0 Plain Table 5;\lsdpriority40 \lsdlocked0 Grid Table Light;\lsdpriority46 \lsdlocked0 Grid Table 1 Light;\lsdpriority47 \lsdlocked0 Grid Table 2;\lsdpriority48 \lsdlocked0 Grid Table 3;\lsdpriority49 \lsdlocked0 Grid Table 4;
\lsdpriority50 \lsdlocked0 Grid Table 5 Dark;\lsdpriority51 \lsdlocked0 Grid Table 6 Colorful;\lsdpriority52 \lsdlocked0 Grid Table 7 Colorful;\lsdpriority46 \lsdlocked0 Grid Table 1 Light Accent 1;\lsdpriority47 \lsdlocked0 Grid Table 2 Accent 1;
\lsdpriority48 \lsdlocked0 Grid Table 3 Accent 1;\lsdpriority49 \lsdlocked0 Grid Table 4 Accent 1;\lsdpriority50 \lsdlocked0 Grid Table 5 Dark Accent 1;\lsdpriority51 \lsdlocked0 Grid Table 6 Colorful Accent 1;
\lsdpriority52 \lsdlocked0 Grid Table 7 Colorful Accent 1;\lsdpriority46 \lsdlocked0 Grid Table 1 Light Accent 2;\lsdpriority47 \lsdlocked0 Grid Table 2 Accent 2;\lsdpriority48 \lsdlocked0 Grid Table 3 Accent 2;
\lsdpriority49 \lsdlocked0 Grid Table 4 Accent 2;\lsdpriority50 \lsdlocked0 Grid Table 5 Dark Accent 2;\lsdpriority51 \lsdlocked0 Grid Table 6 Colorful Accent 2;\lsdpriority52 \lsdlocked0 Grid Table 7 Colorful Accent 2;
\lsdpriority46 \lsdlocked0 Grid Table 1 Light Accent 3;\lsdpriority47 \lsdlocked0 Grid Table 2 Accent 3;\lsdpriority48 \lsdlocked0 Grid Table 3 Accent 3;\lsdpriority49 \lsdlocked0 Grid Table 4 Accent 3;
\lsdpriority50 \lsdlocked0 Grid Table 5 Dark Accent 3;\lsdpriority51 \lsdlocked0 Grid Table 6 Colorful Accent 3;\lsdpriority52 \lsdlocked0 Grid Table 7 Colorful Accent 3;\lsdpriority46 \lsdlocked0 Grid Table 1 Light Accent 4;
\lsdpriority47 \lsdlocked0 Grid Table 2 Accent 4;\lsdpriority48 \lsdlocked0 Grid Table 3 Accent 4;\lsdpriority49 \lsdlocked0 Grid Table 4 Accent 4;\lsdpriority50 \lsdlocked0 Grid Table 5 Dark Accent 4;
\lsdpriority51 \lsdlocked0 Grid Table 6 Colorful Accent 4;\lsdpriority52 \lsdlocked0 Grid Table 7 Colorful Accent 4;\lsdpriority46 \lsdlocked0 Grid Table 1 Light Accent 5;\lsdpriority47 \lsdlocked0 Grid Table 2 Accent 5;
\lsdpriority48 \lsdlocked0 Grid Table 3 Accent 5;\lsdpriority49 \lsdlocked0 Grid Table 4 Accent 5;\lsdpriority50 \lsdlocked0 Grid Table 5 Dark Accent 5;\lsdpriority51 \lsdlocked0 Grid Table 6 Colorful Accent 5;
\lsdpriority52 \lsdlocked0 Grid Table 7 Colorful Accent 5;\lsdpriority46 \lsdlocked0 Grid Table 1 Light Accent 6;\lsdpriority47 \lsdlocked0 Grid Table 2 Accent 6;\lsdpriority48 \lsdlocked0 Grid Table 3 Accent 6;
\lsdpriority49 \lsdlocked0 Grid Table 4 Accent 6;\lsdpriority50 \lsdlocked0 Grid Table 5 Dark Accent 6;\lsdpriority51 \lsdlocked0 Grid Table 6 Colorful Accent 6;\lsdpriority52 \lsdlocked0 Grid Table 7 Colorful Accent 6;
\lsdpriority46 \lsdlocked0 List Table 1 Light;\lsdpriority47 \lsdlocked0 List Table 2;\lsdpriority48 \lsdlocked0 List Table 3;\lsdpriority49 \lsdlocked0 List Table 4;\lsdpriority50 \lsdlocked0 List Table 5 Dark;
\lsdpriority51 \lsdlocked0 List Table 6 Colorful;\lsdpriority52 \lsdlocked0 List Table 7 Colorful;\lsdpriority46 \lsdlocked0 List Table 1 Light Accent 1;\lsdpriority47 \lsdlocked0 List Table 2 Accent 1;\lsdpriority48 \lsdlocked0 List Table 3 Accent 1;
\lsdpriority49 \lsdlocked0 List Table 4 Accent 1;\lsdpriority50 \lsdlocked0 List Table 5 Dark Accent 1;\lsdpriority51 \lsdlocked0 List Table 6 Colorful Accent 1;\lsdpriority52 \lsdlocked0 List Table 7 Colorful Accent 1;
\lsdpriority46 \lsdlocked0 List Table 1 Light Accent 2;\lsdpriority47 \lsdlocked0 List Table 2 Accent 2;\lsdpriority48 \lsdlocked0 List Table 3 Accent 2;\lsdpriority49 \lsdlocked0 List Table 4 Accent 2;
\lsdpriority50 \lsdlocked0 List Table 5 Dark Accent 2;\lsdpriority51 \lsdlocked0 List Table 6 Colorful Accent 2;\lsdpriority52 \lsdlocked0 List Table 7 Colorful Accent 2;\lsdpriority46 \lsdlocked0 List Table 1 Light Accent 3;
\lsdpriority47 \lsdlocked0 List Table 2 Accent 3;\lsdpriority48 \lsdlocked0 List Table 3 Accent 3;\lsdpriority49 \lsdlocked0 List Table 4 Accent 3;\lsdpriority50 \lsdlocked0 List Table 5 Dark Accent 3;
\lsdpriority51 \lsdlocked0 List Table 6 Colorful Accent 3;\lsdpriority52 \lsdlocked0 List Table 7 Colorful Accent 3;\lsdpriority46 \lsdlocked0 List Table 1 Light Accent 4;\lsdpriority47 \lsdlocked0 List Table 2 Accent 4;
\lsdpriority48 \lsdlocked0 List Table 3 Accent 4;\lsdpriority49 \lsdlocked0 List Table 4 Accent 4;\lsdpriority50 \lsdlocked0 List Table 5 Dark Accent 4;\lsdpriority51 \lsdlocked0 List Table 6 Colorful Accent 4;
\lsdpriority52 \lsdlocked0 List Table 7 Colorful Accent 4;\lsdpriority46 \lsdlocked0 List Table 1 Light Accent 5;\lsdpriority47 \lsdlocked0 List Table 2 Accent 5;\lsdpriority48 \lsdlocked0 List Table 3 Accent 5;
\lsdpriority49 \lsdlocked0 List Table 4 Accent 5;\lsdpriority50 \lsdlocked0 List Table 5 Dark Accent 5;\lsdpriority51 \lsdlocked0 List Table 6 Colorful Accent 5;\lsdpriority52 \lsdlocked0 List Table 7 Colorful Accent 5;
\lsdpriority46 \lsdlocked0 List Table 1 Light Accent 6;\lsdpriority47 \lsdlocked0 List Table 2 Accent 6;\lsdpriority48 \lsdlocked0 List Table 3 Accent 6;\lsdpriority49 \lsdlocked0 List Table 4 Accent 6;
\lsdpriority50 \lsdlocked0 List Table 5 Dark Accent 6;\lsdpriority51 \lsdlocked0 List Table 6 Colorful Accent 6;\lsdpriority52 \lsdlocked0 List Table 7 Colorful Accent 6;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Mention;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Smart Hyperlink;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Hashtag;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Unresolved Mention;}}{\*\datastore 010500000200000018000000
4d73786d6c322e534158584d4c5265616465722e362e3000000000000000000000060000
d0cf11e0a1b11ae1000000000000000000000000000000003e000300feff090006000000000000000000000001000000010000000000000000100000feffffff00000000feffffff0000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffffffffffdfffffffeffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffff52006f006f007400200045006e00740072007900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000016000500ffffffffffffffffffffffff0c6ad98892f1d411a65f0040963251e5000000000000000000000000e082
d4ac1a34d501feffffff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffff000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000105000000000000}}